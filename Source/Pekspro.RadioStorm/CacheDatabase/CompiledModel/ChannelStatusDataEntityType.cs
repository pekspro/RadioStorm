// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using Pekspro.RadioStorm.CacheDatabase.Models;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Pekspro.RadioStorm.CacheDatabase.CompiledModel
{
    internal partial class ChannelStatusDataEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Pekspro.RadioStorm.CacheDatabase.Models.ChannelStatusData",
                typeof(ChannelStatusData),
                baseEntityType);

            var channelId = runtimeEntityType.AddProperty(
                "ChannelId",
                typeof(int),
                propertyInfo: typeof(ChannelStatusData).GetProperty("ChannelId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<ChannelId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);

            var currentEndTime = runtimeEntityType.AddProperty(
                "CurrentEndTime",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(ChannelStatusData).GetProperty("CurrentEndTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<CurrentEndTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new DateTimeOffsetToTicksConverter());
            currentEndTime.AddAnnotation("Relational:ColumnType", "bigint");

            var currentProgram = runtimeEntityType.AddProperty(
                "CurrentProgram",
                typeof(string),
                propertyInfo: typeof(ChannelStatusData).GetProperty("CurrentProgram", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<CurrentProgram>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var currentProgramDescription = runtimeEntityType.AddProperty(
                "CurrentProgramDescription",
                typeof(string),
                propertyInfo: typeof(ChannelStatusData).GetProperty("CurrentProgramDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<CurrentProgramDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var currentProgramId = runtimeEntityType.AddProperty(
                "CurrentProgramId",
                typeof(int?),
                propertyInfo: typeof(ChannelStatusData).GetProperty("CurrentProgramId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<CurrentProgramId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var currentProgramImage = runtimeEntityType.AddProperty(
                "CurrentProgramImage",
                typeof(string),
                propertyInfo: typeof(ChannelStatusData).GetProperty("CurrentProgramImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<CurrentProgramImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var currentStartTime = runtimeEntityType.AddProperty(
                "CurrentStartTime",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(ChannelStatusData).GetProperty("CurrentStartTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<CurrentStartTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new DateTimeOffsetToTicksConverter());
            currentStartTime.AddAnnotation("Relational:ColumnType", "bigint");

            var latestUpdateTime = runtimeEntityType.AddProperty(
                "LatestUpdateTime",
                typeof(DateTimeOffset),
                propertyInfo: typeof(ChannelStatusData).GetProperty("LatestUpdateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<LatestUpdateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToTicksConverter());
            latestUpdateTime.AddAnnotation("Relational:ColumnType", "bigint");

            var nextEndTime = runtimeEntityType.AddProperty(
                "NextEndTime",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(ChannelStatusData).GetProperty("NextEndTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<NextEndTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new DateTimeOffsetToTicksConverter());
            nextEndTime.AddAnnotation("Relational:ColumnType", "bigint");

            var nextProgram = runtimeEntityType.AddProperty(
                "NextProgram",
                typeof(string),
                propertyInfo: typeof(ChannelStatusData).GetProperty("NextProgram", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<NextProgram>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var nextProgramDescription = runtimeEntityType.AddProperty(
                "NextProgramDescription",
                typeof(string),
                propertyInfo: typeof(ChannelStatusData).GetProperty("NextProgramDescription", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<NextProgramDescription>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var nextProgramId = runtimeEntityType.AddProperty(
                "NextProgramId",
                typeof(int?),
                propertyInfo: typeof(ChannelStatusData).GetProperty("NextProgramId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<NextProgramId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var nextProgramImage = runtimeEntityType.AddProperty(
                "NextProgramImage",
                typeof(string),
                propertyInfo: typeof(ChannelStatusData).GetProperty("NextProgramImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<NextProgramImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var nextStartTime = runtimeEntityType.AddProperty(
                "NextStartTime",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(ChannelStatusData).GetProperty("NextStartTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(ChannelStatusData).GetField("<NextStartTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new DateTimeOffsetToTicksConverter());
            nextStartTime.AddAnnotation("Relational:ColumnType", "bigint");

            var key = runtimeEntityType.AddKey(
                new[] { channelId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "ChannelStatusData");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
