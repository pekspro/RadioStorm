// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using Pekspro.RadioStorm.CacheDatabase.Models;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Pekspro.RadioStorm.CacheDatabase.CompiledModel
{
    internal sealed partial class EpisodeSongListItemDataEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListItemData",
                typeof(EpisodeSongListItemData),
                baseEntityType);

            var episodeSongListItemDataId = runtimeEntityType.AddProperty(
                "EpisodeSongListItemDataId",
                typeof(int),
                propertyInfo: typeof(EpisodeSongListItemData).GetProperty("EpisodeSongListItemDataId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeSongListItemData).GetField("<EpisodeSongListItemDataId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw);

            var albumName = runtimeEntityType.AddProperty(
                "AlbumName",
                typeof(string),
                propertyInfo: typeof(SongListItemData).GetProperty("AlbumName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SongListItemData).GetField("<AlbumName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var artist = runtimeEntityType.AddProperty(
                "Artist",
                typeof(string),
                propertyInfo: typeof(SongListItemData).GetProperty("Artist", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SongListItemData).GetField("<Artist>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var composer = runtimeEntityType.AddProperty(
                "Composer",
                typeof(string),
                propertyInfo: typeof(SongListItemData).GetProperty("Composer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SongListItemData).GetField("<Composer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var episodeId = runtimeEntityType.AddProperty(
                "EpisodeId",
                typeof(int),
                propertyInfo: typeof(EpisodeSongListItemData).GetProperty("EpisodeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeSongListItemData).GetField("<EpisodeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var latestUpdateTime = runtimeEntityType.AddProperty(
                "LatestUpdateTime",
                typeof(DateTimeOffset),
                propertyInfo: typeof(SongListItemData).GetProperty("LatestUpdateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SongListItemData).GetField("<LatestUpdateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToTicksConverter());
            latestUpdateTime.AddAnnotation("Relational:ColumnType", "bigint");

            var publishDate = runtimeEntityType.AddProperty(
                "PublishDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(SongListItemData).GetProperty("PublishDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SongListItemData).GetField("<PublishDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToTicksConverter());
            publishDate.AddAnnotation("Relational:ColumnType", "bigint");

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(SongListItemData).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(SongListItemData).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { episodeSongListItemDataId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { episodeId, publishDate });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EpisodeSongListItemData");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
