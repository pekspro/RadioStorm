// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Pekspro.RadioStorm.CacheDatabase.CompiledModel
{
    public partial class CacheDatabaseContextModel
    {
        partial void Initialize()
        {
            var channelData = ChannelDataEntityType.Create(this);
            var channelSongListItemData = ChannelSongListItemDataEntityType.Create(this);
            var channelSongListSyncStatusData = ChannelSongListSyncStatusDataEntityType.Create(this);
            var channelStatusData = ChannelStatusDataEntityType.Create(this);
            var dataBaseSchema = DataBaseSchemaEntityType.Create(this);
            var episodeData = EpisodeDataEntityType.Create(this);
            var episodeListSyncStatusData = EpisodeListSyncStatusDataEntityType.Create(this);
            var episodeSongListItemData = EpisodeSongListItemDataEntityType.Create(this);
            var episodeSongListSyncStatusData = EpisodeSongListSyncStatusDataEntityType.Create(this);
            var listSyncStatusData = ListSyncStatusDataEntityType.Create(this);
            var programData = ProgramDataEntityType.Create(this);
            var scheduledEpisodeListItemData = ScheduledEpisodeListItemDataEntityType.Create(this);
            var scheduledEpisodeListSyncStatusData = ScheduledEpisodeListSyncStatusDataEntityType.Create(this);

            ChannelDataEntityType.CreateAnnotations(channelData);
            ChannelSongListItemDataEntityType.CreateAnnotations(channelSongListItemData);
            ChannelSongListSyncStatusDataEntityType.CreateAnnotations(channelSongListSyncStatusData);
            ChannelStatusDataEntityType.CreateAnnotations(channelStatusData);
            DataBaseSchemaEntityType.CreateAnnotations(dataBaseSchema);
            EpisodeDataEntityType.CreateAnnotations(episodeData);
            EpisodeListSyncStatusDataEntityType.CreateAnnotations(episodeListSyncStatusData);
            EpisodeSongListItemDataEntityType.CreateAnnotations(episodeSongListItemData);
            EpisodeSongListSyncStatusDataEntityType.CreateAnnotations(episodeSongListSyncStatusData);
            ListSyncStatusDataEntityType.CreateAnnotations(listSyncStatusData);
            ProgramDataEntityType.CreateAnnotations(programData);
            ScheduledEpisodeListItemDataEntityType.CreateAnnotations(scheduledEpisodeListItemData);
            ScheduledEpisodeListSyncStatusDataEntityType.CreateAnnotations(scheduledEpisodeListSyncStatusData);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var channelData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.ChannelData")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            channelData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var peksproRadioStormCacheDatabaseModelsChannelDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.ChannelData", null, relationalModel);
            var channelColorColumnBase = new ColumnBase<ColumnMappingBase>("ChannelColor", "TEXT", peksproRadioStormCacheDatabaseModelsChannelDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.Columns.Add("ChannelColor", channelColorColumnBase);
            var channelGroupNameColumnBase = new ColumnBase<ColumnMappingBase>("ChannelGroupName", "TEXT", peksproRadioStormCacheDatabaseModelsChannelDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.Columns.Add("ChannelGroupName", channelGroupNameColumnBase);
            var channelIdColumnBase = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", peksproRadioStormCacheDatabaseModelsChannelDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.Columns.Add("ChannelId", channelIdColumnBase);
            var channelImageHighResolutionColumnBase = new ColumnBase<ColumnMappingBase>("ChannelImageHighResolution", "TEXT", peksproRadioStormCacheDatabaseModelsChannelDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.Columns.Add("ChannelImageHighResolution", channelImageHighResolutionColumnBase);
            var channelImageLowResolutionColumnBase = new ColumnBase<ColumnMappingBase>("ChannelImageLowResolution", "TEXT", peksproRadioStormCacheDatabaseModelsChannelDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.Columns.Add("ChannelImageLowResolution", channelImageLowResolutionColumnBase);
            var latestUpdateTimeColumnBase = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsChannelDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase);
            var liveAudioUrlColumnBase = new ColumnBase<ColumnMappingBase>("LiveAudioUrl", "TEXT", peksproRadioStormCacheDatabaseModelsChannelDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.Columns.Add("LiveAudioUrl", liveAudioUrlColumnBase);
            var titleColumnBase = new ColumnBase<ColumnMappingBase>("Title", "TEXT", peksproRadioStormCacheDatabaseModelsChannelDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.Columns.Add("Title", titleColumnBase);
            var webPageUriColumnBase = new ColumnBase<ColumnMappingBase>("WebPageUri", "TEXT", peksproRadioStormCacheDatabaseModelsChannelDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.Columns.Add("WebPageUri", webPageUriColumnBase);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.ChannelData", peksproRadioStormCacheDatabaseModelsChannelDataTableBase);
            var peksproRadioStormCacheDatabaseModelsChannelDataMappingBase = new TableMappingBase<ColumnMappingBase>(channelData, peksproRadioStormCacheDatabaseModelsChannelDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsChannelDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsChannelDataMappingBase, false);
            defaultTableMappings.Add(peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase, channelData.FindProperty("ChannelId")!, peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelColorColumnBase, channelData.FindProperty("ChannelColor")!, peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelGroupNameColumnBase, channelData.FindProperty("ChannelGroupName")!, peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelImageHighResolutionColumnBase, channelData.FindProperty("ChannelImageHighResolution")!, peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelImageLowResolutionColumnBase, channelData.FindProperty("ChannelImageLowResolution")!, peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase, channelData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)liveAudioUrlColumnBase, channelData.FindProperty("LiveAudioUrl")!, peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase, channelData.FindProperty("Title")!, peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)webPageUriColumnBase, channelData.FindProperty("WebPageUri")!, peksproRadioStormCacheDatabaseModelsChannelDataMappingBase);

            var tableMappings = new List<TableMapping>();
            channelData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var channelDataTable = new Table("ChannelData", null, relationalModel);
            var channelIdColumn = new Column("ChannelId", "INTEGER", channelDataTable);
            channelDataTable.Columns.Add("ChannelId", channelIdColumn);
            var channelColorColumn = new Column("ChannelColor", "TEXT", channelDataTable)
            {
                IsNullable = true
            };
            channelDataTable.Columns.Add("ChannelColor", channelColorColumn);
            var channelGroupNameColumn = new Column("ChannelGroupName", "TEXT", channelDataTable);
            channelDataTable.Columns.Add("ChannelGroupName", channelGroupNameColumn);
            var channelImageHighResolutionColumn = new Column("ChannelImageHighResolution", "TEXT", channelDataTable)
            {
                IsNullable = true
            };
            channelDataTable.Columns.Add("ChannelImageHighResolution", channelImageHighResolutionColumn);
            var channelImageLowResolutionColumn = new Column("ChannelImageLowResolution", "TEXT", channelDataTable)
            {
                IsNullable = true
            };
            channelDataTable.Columns.Add("ChannelImageLowResolution", channelImageLowResolutionColumn);
            var latestUpdateTimeColumn = new Column("LatestUpdateTime", "bigint", channelDataTable);
            channelDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn);
            var liveAudioUrlColumn = new Column("LiveAudioUrl", "TEXT", channelDataTable)
            {
                IsNullable = true
            };
            channelDataTable.Columns.Add("LiveAudioUrl", liveAudioUrlColumn);
            var titleColumn = new Column("Title", "TEXT", channelDataTable);
            channelDataTable.Columns.Add("Title", titleColumn);
            var webPageUriColumn = new Column("WebPageUri", "TEXT", channelDataTable)
            {
                IsNullable = true
            };
            channelDataTable.Columns.Add("WebPageUri", webPageUriColumn);
            var pK_ChannelData = new UniqueConstraint("PK_ChannelData", channelDataTable, new[] { channelIdColumn });
            channelDataTable.PrimaryKey = pK_ChannelData;
            var pK_ChannelDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ChannelData",
                new[] { "ChannelId" });
            pK_ChannelData.MappedKeys.Add(pK_ChannelDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ChannelDataUc).Add(pK_ChannelData);
            channelDataTable.UniqueConstraints.Add("PK_ChannelData", pK_ChannelData);
            relationalModel.Tables.Add(("ChannelData", null), channelDataTable);
            var channelDataTableMapping = new TableMapping(channelData, channelDataTable, true);
            channelDataTable.AddTypeMapping(channelDataTableMapping, false);
            tableMappings.Add(channelDataTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn, channelData.FindProperty("ChannelId")!, channelDataTableMapping);
            RelationalModel.CreateColumnMapping(channelColorColumn, channelData.FindProperty("ChannelColor")!, channelDataTableMapping);
            RelationalModel.CreateColumnMapping(channelGroupNameColumn, channelData.FindProperty("ChannelGroupName")!, channelDataTableMapping);
            RelationalModel.CreateColumnMapping(channelImageHighResolutionColumn, channelData.FindProperty("ChannelImageHighResolution")!, channelDataTableMapping);
            RelationalModel.CreateColumnMapping(channelImageLowResolutionColumn, channelData.FindProperty("ChannelImageLowResolution")!, channelDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn, channelData.FindProperty("LatestUpdateTime")!, channelDataTableMapping);
            RelationalModel.CreateColumnMapping(liveAudioUrlColumn, channelData.FindProperty("LiveAudioUrl")!, channelDataTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn, channelData.FindProperty("Title")!, channelDataTableMapping);
            RelationalModel.CreateColumnMapping(webPageUriColumn, channelData.FindProperty("WebPageUri")!, channelDataTableMapping);

            var channelSongListItemData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.ChannelSongListItemData")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            channelSongListItemData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.ChannelSongListItemData", null, relationalModel);
            var albumNameColumnBase = new ColumnBase<ColumnMappingBase>("AlbumName", "TEXT", peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase.Columns.Add("AlbumName", albumNameColumnBase);
            var artistColumnBase = new ColumnBase<ColumnMappingBase>("Artist", "TEXT", peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase.Columns.Add("Artist", artistColumnBase);
            var channelIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase.Columns.Add("ChannelId", channelIdColumnBase0);
            var channelSongListItemDataIdColumnBase = new ColumnBase<ColumnMappingBase>("ChannelSongListItemDataId", "INTEGER", peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase.Columns.Add("ChannelSongListItemDataId", channelSongListItemDataIdColumnBase);
            var composerColumnBase = new ColumnBase<ColumnMappingBase>("Composer", "TEXT", peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase.Columns.Add("Composer", composerColumnBase);
            var latestUpdateTimeColumnBase0 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase0);
            var publishDateColumnBase = new ColumnBase<ColumnMappingBase>("PublishDate", "bigint", peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase.Columns.Add("PublishDate", publishDateColumnBase);
            var titleColumnBase0 = new ColumnBase<ColumnMappingBase>("Title", "TEXT", peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase.Columns.Add("Title", titleColumnBase0);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.ChannelSongListItemData", peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase);
            var peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase = new TableMappingBase<ColumnMappingBase>(channelSongListItemData, peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsChannelSongListItemDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase, false);
            defaultTableMappings0.Add(peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelSongListItemDataIdColumnBase, channelSongListItemData.FindProperty("ChannelSongListItemDataId")!, peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)albumNameColumnBase, channelSongListItemData.FindProperty("AlbumName")!, peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)artistColumnBase, channelSongListItemData.FindProperty("Artist")!, peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase0, channelSongListItemData.FindProperty("ChannelId")!, peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)composerColumnBase, channelSongListItemData.FindProperty("Composer")!, peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase0, channelSongListItemData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publishDateColumnBase, channelSongListItemData.FindProperty("PublishDate")!, peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase0, channelSongListItemData.FindProperty("Title")!, peksproRadioStormCacheDatabaseModelsChannelSongListItemDataMappingBase);

            var tableMappings0 = new List<TableMapping>();
            channelSongListItemData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var channelSongListItemDataTable = new Table("ChannelSongListItemData", null, relationalModel);
            var channelSongListItemDataIdColumn = new Column("ChannelSongListItemDataId", "INTEGER", channelSongListItemDataTable);
            channelSongListItemDataTable.Columns.Add("ChannelSongListItemDataId", channelSongListItemDataIdColumn);
            var albumNameColumn = new Column("AlbumName", "TEXT", channelSongListItemDataTable)
            {
                IsNullable = true
            };
            channelSongListItemDataTable.Columns.Add("AlbumName", albumNameColumn);
            var artistColumn = new Column("Artist", "TEXT", channelSongListItemDataTable)
            {
                IsNullable = true
            };
            channelSongListItemDataTable.Columns.Add("Artist", artistColumn);
            var channelIdColumn0 = new Column("ChannelId", "INTEGER", channelSongListItemDataTable);
            channelSongListItemDataTable.Columns.Add("ChannelId", channelIdColumn0);
            var composerColumn = new Column("Composer", "TEXT", channelSongListItemDataTable)
            {
                IsNullable = true
            };
            channelSongListItemDataTable.Columns.Add("Composer", composerColumn);
            var latestUpdateTimeColumn0 = new Column("LatestUpdateTime", "bigint", channelSongListItemDataTable);
            channelSongListItemDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn0);
            var publishDateColumn = new Column("PublishDate", "bigint", channelSongListItemDataTable);
            channelSongListItemDataTable.Columns.Add("PublishDate", publishDateColumn);
            var titleColumn0 = new Column("Title", "TEXT", channelSongListItemDataTable);
            channelSongListItemDataTable.Columns.Add("Title", titleColumn0);
            var pK_ChannelSongListItemData = new UniqueConstraint("PK_ChannelSongListItemData", channelSongListItemDataTable, new[] { channelSongListItemDataIdColumn });
            channelSongListItemDataTable.PrimaryKey = pK_ChannelSongListItemData;
            var pK_ChannelSongListItemDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ChannelSongListItemData",
                new[] { "ChannelSongListItemDataId" });
            pK_ChannelSongListItemData.MappedKeys.Add(pK_ChannelSongListItemDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ChannelSongListItemDataUc).Add(pK_ChannelSongListItemData);
            channelSongListItemDataTable.UniqueConstraints.Add("PK_ChannelSongListItemData", pK_ChannelSongListItemData);
            var iX_ChannelSongListItemData_ChannelId_PublishDate = new TableIndex(
            "IX_ChannelSongListItemData_ChannelId_PublishDate", channelSongListItemDataTable, new[] { channelIdColumn0, publishDateColumn }, false);
            var iX_ChannelSongListItemData_ChannelId_PublishDateIx = RelationalModel.GetIndex(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ChannelSongListItemData",
                new[] { "ChannelId", "PublishDate" });
            iX_ChannelSongListItemData_ChannelId_PublishDate.MappedIndexes.Add(iX_ChannelSongListItemData_ChannelId_PublishDateIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ChannelSongListItemData_ChannelId_PublishDateIx).Add(iX_ChannelSongListItemData_ChannelId_PublishDate);
            channelSongListItemDataTable.Indexes.Add("IX_ChannelSongListItemData_ChannelId_PublishDate", iX_ChannelSongListItemData_ChannelId_PublishDate);
            relationalModel.Tables.Add(("ChannelSongListItemData", null), channelSongListItemDataTable);
            var channelSongListItemDataTableMapping = new TableMapping(channelSongListItemData, channelSongListItemDataTable, true);
            channelSongListItemDataTable.AddTypeMapping(channelSongListItemDataTableMapping, false);
            tableMappings0.Add(channelSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(channelSongListItemDataIdColumn, channelSongListItemData.FindProperty("ChannelSongListItemDataId")!, channelSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(albumNameColumn, channelSongListItemData.FindProperty("AlbumName")!, channelSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(artistColumn, channelSongListItemData.FindProperty("Artist")!, channelSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn0, channelSongListItemData.FindProperty("ChannelId")!, channelSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(composerColumn, channelSongListItemData.FindProperty("Composer")!, channelSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn0, channelSongListItemData.FindProperty("LatestUpdateTime")!, channelSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(publishDateColumn, channelSongListItemData.FindProperty("PublishDate")!, channelSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn0, channelSongListItemData.FindProperty("Title")!, channelSongListItemDataTableMapping);

            var channelSongListSyncStatusData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.ChannelSongListSyncStatusData")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            channelSongListSyncStatusData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.ChannelSongListSyncStatusData", null, relationalModel);
            var channelIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataTableBase.Columns.Add("ChannelId", channelIdColumnBase1);
            var latestUpdateTimeColumnBase1 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase1);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.ChannelSongListSyncStatusData", peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataTableBase);
            var peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataMappingBase = new TableMappingBase<ColumnMappingBase>(channelSongListSyncStatusData, peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataMappingBase, false);
            defaultTableMappings1.Add(peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase1, channelSongListSyncStatusData.FindProperty("ChannelId")!, peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase1, channelSongListSyncStatusData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsChannelSongListSyncStatusDataMappingBase);

            var tableMappings1 = new List<TableMapping>();
            channelSongListSyncStatusData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var channelSongListSyncStatusDataTable = new Table("ChannelSongListSyncStatusData", null, relationalModel);
            var channelIdColumn1 = new Column("ChannelId", "INTEGER", channelSongListSyncStatusDataTable);
            channelSongListSyncStatusDataTable.Columns.Add("ChannelId", channelIdColumn1);
            var latestUpdateTimeColumn1 = new Column("LatestUpdateTime", "bigint", channelSongListSyncStatusDataTable);
            channelSongListSyncStatusDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn1);
            var pK_ChannelSongListSyncStatusData = new UniqueConstraint("PK_ChannelSongListSyncStatusData", channelSongListSyncStatusDataTable, new[] { channelIdColumn1 });
            channelSongListSyncStatusDataTable.PrimaryKey = pK_ChannelSongListSyncStatusData;
            var pK_ChannelSongListSyncStatusDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ChannelSongListSyncStatusData",
                new[] { "ChannelId" });
            pK_ChannelSongListSyncStatusData.MappedKeys.Add(pK_ChannelSongListSyncStatusDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ChannelSongListSyncStatusDataUc).Add(pK_ChannelSongListSyncStatusData);
            channelSongListSyncStatusDataTable.UniqueConstraints.Add("PK_ChannelSongListSyncStatusData", pK_ChannelSongListSyncStatusData);
            relationalModel.Tables.Add(("ChannelSongListSyncStatusData", null), channelSongListSyncStatusDataTable);
            var channelSongListSyncStatusDataTableMapping = new TableMapping(channelSongListSyncStatusData, channelSongListSyncStatusDataTable, true);
            channelSongListSyncStatusDataTable.AddTypeMapping(channelSongListSyncStatusDataTableMapping, false);
            tableMappings1.Add(channelSongListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn1, channelSongListSyncStatusData.FindProperty("ChannelId")!, channelSongListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn1, channelSongListSyncStatusData.FindProperty("LatestUpdateTime")!, channelSongListSyncStatusDataTableMapping);

            var channelStatusData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.ChannelStatusData")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            channelStatusData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.ChannelStatusData", null, relationalModel);
            var channelIdColumnBase2 = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("ChannelId", channelIdColumnBase2);
            var currentEndTimeColumnBase = new ColumnBase<ColumnMappingBase>("CurrentEndTime", "bigint", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("CurrentEndTime", currentEndTimeColumnBase);
            var currentProgramColumnBase = new ColumnBase<ColumnMappingBase>("CurrentProgram", "TEXT", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("CurrentProgram", currentProgramColumnBase);
            var currentProgramDescriptionColumnBase = new ColumnBase<ColumnMappingBase>("CurrentProgramDescription", "TEXT", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("CurrentProgramDescription", currentProgramDescriptionColumnBase);
            var currentProgramIdColumnBase = new ColumnBase<ColumnMappingBase>("CurrentProgramId", "INTEGER", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("CurrentProgramId", currentProgramIdColumnBase);
            var currentProgramImageColumnBase = new ColumnBase<ColumnMappingBase>("CurrentProgramImage", "TEXT", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("CurrentProgramImage", currentProgramImageColumnBase);
            var currentStartTimeColumnBase = new ColumnBase<ColumnMappingBase>("CurrentStartTime", "bigint", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("CurrentStartTime", currentStartTimeColumnBase);
            var latestUpdateTimeColumnBase2 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase2);
            var nextEndTimeColumnBase = new ColumnBase<ColumnMappingBase>("NextEndTime", "bigint", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("NextEndTime", nextEndTimeColumnBase);
            var nextProgramColumnBase = new ColumnBase<ColumnMappingBase>("NextProgram", "TEXT", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("NextProgram", nextProgramColumnBase);
            var nextProgramDescriptionColumnBase = new ColumnBase<ColumnMappingBase>("NextProgramDescription", "TEXT", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("NextProgramDescription", nextProgramDescriptionColumnBase);
            var nextProgramIdColumnBase = new ColumnBase<ColumnMappingBase>("NextProgramId", "INTEGER", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("NextProgramId", nextProgramIdColumnBase);
            var nextProgramImageColumnBase = new ColumnBase<ColumnMappingBase>("NextProgramImage", "TEXT", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("NextProgramImage", nextProgramImageColumnBase);
            var nextStartTimeColumnBase = new ColumnBase<ColumnMappingBase>("NextStartTime", "bigint", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.Columns.Add("NextStartTime", nextStartTimeColumnBase);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.ChannelStatusData", peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase);
            var peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase = new TableMappingBase<ColumnMappingBase>(channelStatusData, peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsChannelStatusDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase, false);
            defaultTableMappings2.Add(peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase2, channelStatusData.FindProperty("ChannelId")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentEndTimeColumnBase, channelStatusData.FindProperty("CurrentEndTime")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentProgramColumnBase, channelStatusData.FindProperty("CurrentProgram")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentProgramDescriptionColumnBase, channelStatusData.FindProperty("CurrentProgramDescription")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentProgramIdColumnBase, channelStatusData.FindProperty("CurrentProgramId")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentProgramImageColumnBase, channelStatusData.FindProperty("CurrentProgramImage")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)currentStartTimeColumnBase, channelStatusData.FindProperty("CurrentStartTime")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase2, channelStatusData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nextEndTimeColumnBase, channelStatusData.FindProperty("NextEndTime")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nextProgramColumnBase, channelStatusData.FindProperty("NextProgram")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nextProgramDescriptionColumnBase, channelStatusData.FindProperty("NextProgramDescription")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nextProgramIdColumnBase, channelStatusData.FindProperty("NextProgramId")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nextProgramImageColumnBase, channelStatusData.FindProperty("NextProgramImage")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nextStartTimeColumnBase, channelStatusData.FindProperty("NextStartTime")!, peksproRadioStormCacheDatabaseModelsChannelStatusDataMappingBase);

            var tableMappings2 = new List<TableMapping>();
            channelStatusData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var channelStatusDataTable = new Table("ChannelStatusData", null, relationalModel);
            var channelIdColumn2 = new Column("ChannelId", "INTEGER", channelStatusDataTable);
            channelStatusDataTable.Columns.Add("ChannelId", channelIdColumn2);
            var currentEndTimeColumn = new Column("CurrentEndTime", "bigint", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("CurrentEndTime", currentEndTimeColumn);
            var currentProgramColumn = new Column("CurrentProgram", "TEXT", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("CurrentProgram", currentProgramColumn);
            var currentProgramDescriptionColumn = new Column("CurrentProgramDescription", "TEXT", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("CurrentProgramDescription", currentProgramDescriptionColumn);
            var currentProgramIdColumn = new Column("CurrentProgramId", "INTEGER", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("CurrentProgramId", currentProgramIdColumn);
            var currentProgramImageColumn = new Column("CurrentProgramImage", "TEXT", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("CurrentProgramImage", currentProgramImageColumn);
            var currentStartTimeColumn = new Column("CurrentStartTime", "bigint", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("CurrentStartTime", currentStartTimeColumn);
            var latestUpdateTimeColumn2 = new Column("LatestUpdateTime", "bigint", channelStatusDataTable);
            channelStatusDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn2);
            var nextEndTimeColumn = new Column("NextEndTime", "bigint", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("NextEndTime", nextEndTimeColumn);
            var nextProgramColumn = new Column("NextProgram", "TEXT", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("NextProgram", nextProgramColumn);
            var nextProgramDescriptionColumn = new Column("NextProgramDescription", "TEXT", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("NextProgramDescription", nextProgramDescriptionColumn);
            var nextProgramIdColumn = new Column("NextProgramId", "INTEGER", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("NextProgramId", nextProgramIdColumn);
            var nextProgramImageColumn = new Column("NextProgramImage", "TEXT", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("NextProgramImage", nextProgramImageColumn);
            var nextStartTimeColumn = new Column("NextStartTime", "bigint", channelStatusDataTable)
            {
                IsNullable = true
            };
            channelStatusDataTable.Columns.Add("NextStartTime", nextStartTimeColumn);
            var pK_ChannelStatusData = new UniqueConstraint("PK_ChannelStatusData", channelStatusDataTable, new[] { channelIdColumn2 });
            channelStatusDataTable.PrimaryKey = pK_ChannelStatusData;
            var pK_ChannelStatusDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ChannelStatusData",
                new[] { "ChannelId" });
            pK_ChannelStatusData.MappedKeys.Add(pK_ChannelStatusDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ChannelStatusDataUc).Add(pK_ChannelStatusData);
            channelStatusDataTable.UniqueConstraints.Add("PK_ChannelStatusData", pK_ChannelStatusData);
            relationalModel.Tables.Add(("ChannelStatusData", null), channelStatusDataTable);
            var channelStatusDataTableMapping = new TableMapping(channelStatusData, channelStatusDataTable, true);
            channelStatusDataTable.AddTypeMapping(channelStatusDataTableMapping, false);
            tableMappings2.Add(channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn2, channelStatusData.FindProperty("ChannelId")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(currentEndTimeColumn, channelStatusData.FindProperty("CurrentEndTime")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(currentProgramColumn, channelStatusData.FindProperty("CurrentProgram")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(currentProgramDescriptionColumn, channelStatusData.FindProperty("CurrentProgramDescription")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(currentProgramIdColumn, channelStatusData.FindProperty("CurrentProgramId")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(currentProgramImageColumn, channelStatusData.FindProperty("CurrentProgramImage")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(currentStartTimeColumn, channelStatusData.FindProperty("CurrentStartTime")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn2, channelStatusData.FindProperty("LatestUpdateTime")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(nextEndTimeColumn, channelStatusData.FindProperty("NextEndTime")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(nextProgramColumn, channelStatusData.FindProperty("NextProgram")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(nextProgramDescriptionColumn, channelStatusData.FindProperty("NextProgramDescription")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(nextProgramIdColumn, channelStatusData.FindProperty("NextProgramId")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(nextProgramImageColumn, channelStatusData.FindProperty("NextProgramImage")!, channelStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(nextStartTimeColumn, channelStatusData.FindProperty("NextStartTime")!, channelStatusDataTableMapping);

            var dataBaseSchema = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.DataBaseSchema")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            dataBaseSchema.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var peksproRadioStormCacheDatabaseModelsDataBaseSchemaTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.DataBaseSchema", null, relationalModel);
            var dataBaseSchemaIdColumnBase = new ColumnBase<ColumnMappingBase>("DataBaseSchemaId", "INTEGER", peksproRadioStormCacheDatabaseModelsDataBaseSchemaTableBase);
            peksproRadioStormCacheDatabaseModelsDataBaseSchemaTableBase.Columns.Add("DataBaseSchemaId", dataBaseSchemaIdColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("Version", "INTEGER", peksproRadioStormCacheDatabaseModelsDataBaseSchemaTableBase);
            peksproRadioStormCacheDatabaseModelsDataBaseSchemaTableBase.Columns.Add("Version", versionColumnBase);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.DataBaseSchema", peksproRadioStormCacheDatabaseModelsDataBaseSchemaTableBase);
            var peksproRadioStormCacheDatabaseModelsDataBaseSchemaMappingBase = new TableMappingBase<ColumnMappingBase>(dataBaseSchema, peksproRadioStormCacheDatabaseModelsDataBaseSchemaTableBase, true);
            peksproRadioStormCacheDatabaseModelsDataBaseSchemaTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsDataBaseSchemaMappingBase, false);
            defaultTableMappings3.Add(peksproRadioStormCacheDatabaseModelsDataBaseSchemaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dataBaseSchemaIdColumnBase, dataBaseSchema.FindProperty("DataBaseSchemaId")!, peksproRadioStormCacheDatabaseModelsDataBaseSchemaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, dataBaseSchema.FindProperty("Version")!, peksproRadioStormCacheDatabaseModelsDataBaseSchemaMappingBase);

            var tableMappings3 = new List<TableMapping>();
            dataBaseSchema.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var dataBaseSchemaTable = new Table("DataBaseSchema", null, relationalModel);
            var dataBaseSchemaIdColumn = new Column("DataBaseSchemaId", "INTEGER", dataBaseSchemaTable);
            dataBaseSchemaTable.Columns.Add("DataBaseSchemaId", dataBaseSchemaIdColumn);
            var versionColumn = new Column("Version", "INTEGER", dataBaseSchemaTable);
            dataBaseSchemaTable.Columns.Add("Version", versionColumn);
            var pK_DataBaseSchema = new UniqueConstraint("PK_DataBaseSchema", dataBaseSchemaTable, new[] { dataBaseSchemaIdColumn });
            dataBaseSchemaTable.PrimaryKey = pK_DataBaseSchema;
            var pK_DataBaseSchemaUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.DataBaseSchema",
                new[] { "DataBaseSchemaId" });
            pK_DataBaseSchema.MappedKeys.Add(pK_DataBaseSchemaUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_DataBaseSchemaUc).Add(pK_DataBaseSchema);
            dataBaseSchemaTable.UniqueConstraints.Add("PK_DataBaseSchema", pK_DataBaseSchema);
            relationalModel.Tables.Add(("DataBaseSchema", null), dataBaseSchemaTable);
            var dataBaseSchemaTableMapping = new TableMapping(dataBaseSchema, dataBaseSchemaTable, true);
            dataBaseSchemaTable.AddTypeMapping(dataBaseSchemaTableMapping, false);
            tableMappings3.Add(dataBaseSchemaTableMapping);
            RelationalModel.CreateColumnMapping(dataBaseSchemaIdColumn, dataBaseSchema.FindProperty("DataBaseSchemaId")!, dataBaseSchemaTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, dataBaseSchema.FindProperty("Version")!, dataBaseSchemaTableMapping);

            var episodeData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeData")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            episodeData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeData", null, relationalModel);
            var audioDownloadDurationColumnBase = new ColumnBase<ColumnMappingBase>("AudioDownloadDuration", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("AudioDownloadDuration", audioDownloadDurationColumnBase);
            var audioDownloadUrlColumnBase = new ColumnBase<ColumnMappingBase>("AudioDownloadUrl", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("AudioDownloadUrl", audioDownloadUrlColumnBase);
            var audioStreamWithMusicDurationColumnBase = new ColumnBase<ColumnMappingBase>("AudioStreamWithMusicDuration", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("AudioStreamWithMusicDuration", audioStreamWithMusicDurationColumnBase);
            var audioStreamWithMusicExpireDateColumnBase = new ColumnBase<ColumnMappingBase>("AudioStreamWithMusicExpireDate", "bigint", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("AudioStreamWithMusicExpireDate", audioStreamWithMusicExpireDateColumnBase);
            var audioStreamWithMusicUrlColumnBase = new ColumnBase<ColumnMappingBase>("AudioStreamWithMusicUrl", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("AudioStreamWithMusicUrl", audioStreamWithMusicUrlColumnBase);
            var audioStreamWithoutMusicDurationColumnBase = new ColumnBase<ColumnMappingBase>("AudioStreamWithoutMusicDuration", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("AudioStreamWithoutMusicDuration", audioStreamWithoutMusicDurationColumnBase);
            var audioStreamWithoutMusicUrlColumnBase = new ColumnBase<ColumnMappingBase>("AudioStreamWithoutMusicUrl", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("AudioStreamWithoutMusicUrl", audioStreamWithoutMusicUrlColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("Description", descriptionColumnBase);
            var episodeIdColumnBase = new ColumnBase<ColumnMappingBase>("EpisodeId", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("EpisodeId", episodeIdColumnBase);
            var episodeImageColumnBase = new ColumnBase<ColumnMappingBase>("EpisodeImage", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("EpisodeImage", episodeImageColumnBase);
            var latestUpdateTimeColumnBase3 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase3);
            var programIdColumnBase = new ColumnBase<ColumnMappingBase>("ProgramId", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("ProgramId", programIdColumnBase);
            var programNameColumnBase = new ColumnBase<ColumnMappingBase>("ProgramName", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("ProgramName", programNameColumnBase);
            var publishDateColumnBase0 = new ColumnBase<ColumnMappingBase>("PublishDate", "bigint", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("PublishDate", publishDateColumnBase0);
            var titleColumnBase1 = new ColumnBase<ColumnMappingBase>("Title", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.Columns.Add("Title", titleColumnBase1);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeData", peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase);
            var peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase = new TableMappingBase<ColumnMappingBase>(episodeData, peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsEpisodeDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase, false);
            defaultTableMappings4.Add(peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)episodeIdColumnBase, episodeData.FindProperty("EpisodeId")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)audioDownloadDurationColumnBase, episodeData.FindProperty("AudioDownloadDuration")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)audioDownloadUrlColumnBase, episodeData.FindProperty("AudioDownloadUrl")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)audioStreamWithMusicDurationColumnBase, episodeData.FindProperty("AudioStreamWithMusicDuration")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)audioStreamWithMusicExpireDateColumnBase, episodeData.FindProperty("AudioStreamWithMusicExpireDate")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)audioStreamWithMusicUrlColumnBase, episodeData.FindProperty("AudioStreamWithMusicUrl")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)audioStreamWithoutMusicDurationColumnBase, episodeData.FindProperty("AudioStreamWithoutMusicDuration")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)audioStreamWithoutMusicUrlColumnBase, episodeData.FindProperty("AudioStreamWithoutMusicUrl")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, episodeData.FindProperty("Description")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)episodeImageColumnBase, episodeData.FindProperty("EpisodeImage")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase3, episodeData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programIdColumnBase, episodeData.FindProperty("ProgramId")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programNameColumnBase, episodeData.FindProperty("ProgramName")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publishDateColumnBase0, episodeData.FindProperty("PublishDate")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase1, episodeData.FindProperty("Title")!, peksproRadioStormCacheDatabaseModelsEpisodeDataMappingBase);

            var tableMappings4 = new List<TableMapping>();
            episodeData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var episodeDataTable = new Table("EpisodeData", null, relationalModel);
            var episodeIdColumn = new Column("EpisodeId", "INTEGER", episodeDataTable);
            episodeDataTable.Columns.Add("EpisodeId", episodeIdColumn);
            var audioDownloadDurationColumn = new Column("AudioDownloadDuration", "INTEGER", episodeDataTable);
            episodeDataTable.Columns.Add("AudioDownloadDuration", audioDownloadDurationColumn);
            var audioDownloadUrlColumn = new Column("AudioDownloadUrl", "TEXT", episodeDataTable)
            {
                IsNullable = true
            };
            episodeDataTable.Columns.Add("AudioDownloadUrl", audioDownloadUrlColumn);
            var audioStreamWithMusicDurationColumn = new Column("AudioStreamWithMusicDuration", "INTEGER", episodeDataTable);
            episodeDataTable.Columns.Add("AudioStreamWithMusicDuration", audioStreamWithMusicDurationColumn);
            var audioStreamWithMusicExpireDateColumn = new Column("AudioStreamWithMusicExpireDate", "bigint", episodeDataTable)
            {
                IsNullable = true
            };
            episodeDataTable.Columns.Add("AudioStreamWithMusicExpireDate", audioStreamWithMusicExpireDateColumn);
            var audioStreamWithMusicUrlColumn = new Column("AudioStreamWithMusicUrl", "TEXT", episodeDataTable)
            {
                IsNullable = true
            };
            episodeDataTable.Columns.Add("AudioStreamWithMusicUrl", audioStreamWithMusicUrlColumn);
            var audioStreamWithoutMusicDurationColumn = new Column("AudioStreamWithoutMusicDuration", "INTEGER", episodeDataTable);
            episodeDataTable.Columns.Add("AudioStreamWithoutMusicDuration", audioStreamWithoutMusicDurationColumn);
            var audioStreamWithoutMusicUrlColumn = new Column("AudioStreamWithoutMusicUrl", "TEXT", episodeDataTable)
            {
                IsNullable = true
            };
            episodeDataTable.Columns.Add("AudioStreamWithoutMusicUrl", audioStreamWithoutMusicUrlColumn);
            var descriptionColumn = new Column("Description", "TEXT", episodeDataTable);
            episodeDataTable.Columns.Add("Description", descriptionColumn);
            var episodeImageColumn = new Column("EpisodeImage", "TEXT", episodeDataTable)
            {
                IsNullable = true
            };
            episodeDataTable.Columns.Add("EpisodeImage", episodeImageColumn);
            var latestUpdateTimeColumn3 = new Column("LatestUpdateTime", "bigint", episodeDataTable);
            episodeDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn3);
            var programIdColumn = new Column("ProgramId", "INTEGER", episodeDataTable)
            {
                IsNullable = true
            };
            episodeDataTable.Columns.Add("ProgramId", programIdColumn);
            var programNameColumn = new Column("ProgramName", "TEXT", episodeDataTable)
            {
                IsNullable = true
            };
            episodeDataTable.Columns.Add("ProgramName", programNameColumn);
            var publishDateColumn0 = new Column("PublishDate", "bigint", episodeDataTable);
            episodeDataTable.Columns.Add("PublishDate", publishDateColumn0);
            var titleColumn1 = new Column("Title", "TEXT", episodeDataTable);
            episodeDataTable.Columns.Add("Title", titleColumn1);
            var pK_EpisodeData = new UniqueConstraint("PK_EpisodeData", episodeDataTable, new[] { episodeIdColumn });
            episodeDataTable.PrimaryKey = pK_EpisodeData;
            var pK_EpisodeDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.EpisodeData",
                new[] { "EpisodeId" });
            pK_EpisodeData.MappedKeys.Add(pK_EpisodeDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EpisodeDataUc).Add(pK_EpisodeData);
            episodeDataTable.UniqueConstraints.Add("PK_EpisodeData", pK_EpisodeData);
            var iX_EpisodeData_ProgramId_PublishDate = new TableIndex(
            "IX_EpisodeData_ProgramId_PublishDate", episodeDataTable, new[] { programIdColumn, publishDateColumn0 }, false);
            var iX_EpisodeData_ProgramId_PublishDateIx = RelationalModel.GetIndex(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.EpisodeData",
                new[] { "ProgramId", "PublishDate" });
            iX_EpisodeData_ProgramId_PublishDate.MappedIndexes.Add(iX_EpisodeData_ProgramId_PublishDateIx);
            RelationalModel.GetOrCreateTableIndexes(iX_EpisodeData_ProgramId_PublishDateIx).Add(iX_EpisodeData_ProgramId_PublishDate);
            episodeDataTable.Indexes.Add("IX_EpisodeData_ProgramId_PublishDate", iX_EpisodeData_ProgramId_PublishDate);
            relationalModel.Tables.Add(("EpisodeData", null), episodeDataTable);
            var episodeDataTableMapping = new TableMapping(episodeData, episodeDataTable, true);
            episodeDataTable.AddTypeMapping(episodeDataTableMapping, false);
            tableMappings4.Add(episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(episodeIdColumn, episodeData.FindProperty("EpisodeId")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(audioDownloadDurationColumn, episodeData.FindProperty("AudioDownloadDuration")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(audioDownloadUrlColumn, episodeData.FindProperty("AudioDownloadUrl")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(audioStreamWithMusicDurationColumn, episodeData.FindProperty("AudioStreamWithMusicDuration")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(audioStreamWithMusicExpireDateColumn, episodeData.FindProperty("AudioStreamWithMusicExpireDate")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(audioStreamWithMusicUrlColumn, episodeData.FindProperty("AudioStreamWithMusicUrl")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(audioStreamWithoutMusicDurationColumn, episodeData.FindProperty("AudioStreamWithoutMusicDuration")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(audioStreamWithoutMusicUrlColumn, episodeData.FindProperty("AudioStreamWithoutMusicUrl")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, episodeData.FindProperty("Description")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(episodeImageColumn, episodeData.FindProperty("EpisodeImage")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn3, episodeData.FindProperty("LatestUpdateTime")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(programIdColumn, episodeData.FindProperty("ProgramId")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(programNameColumn, episodeData.FindProperty("ProgramName")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(publishDateColumn0, episodeData.FindProperty("PublishDate")!, episodeDataTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn1, episodeData.FindProperty("Title")!, episodeDataTableMapping);

            var episodeListSyncStatusData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeListSyncStatusData")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            episodeListSyncStatusData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeListSyncStatusData", null, relationalModel);
            var incrementallyUpdateCountColumnBase = new ColumnBase<ColumnMappingBase>("IncrementallyUpdateCount", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase.Columns.Add("IncrementallyUpdateCount", incrementallyUpdateCountColumnBase);
            var latestFullSynchronizingTimeColumnBase = new ColumnBase<ColumnMappingBase>("LatestFullSynchronizingTime", "bigint", peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase.Columns.Add("LatestFullSynchronizingTime", latestFullSynchronizingTimeColumnBase);
            var latestUpdateTimeColumnBase4 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase4);
            var programIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ProgramId", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase.Columns.Add("ProgramId", programIdColumnBase0);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("Status", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase.Columns.Add("Status", statusColumnBase);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeListSyncStatusData", peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase);
            var peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataMappingBase = new TableMappingBase<ColumnMappingBase>(episodeListSyncStatusData, peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataMappingBase, false);
            defaultTableMappings5.Add(peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programIdColumnBase0, episodeListSyncStatusData.FindProperty("ProgramId")!, peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)incrementallyUpdateCountColumnBase, episodeListSyncStatusData.FindProperty("IncrementallyUpdateCount")!, peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestFullSynchronizingTimeColumnBase, episodeListSyncStatusData.FindProperty("LatestFullSynchronizingTime")!, peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase4, episodeListSyncStatusData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, episodeListSyncStatusData.FindProperty("Status")!, peksproRadioStormCacheDatabaseModelsEpisodeListSyncStatusDataMappingBase);

            var tableMappings5 = new List<TableMapping>();
            episodeListSyncStatusData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var episodeListSyncStatusDataTable = new Table("EpisodeListSyncStatusData", null, relationalModel);
            var programIdColumn0 = new Column("ProgramId", "INTEGER", episodeListSyncStatusDataTable);
            episodeListSyncStatusDataTable.Columns.Add("ProgramId", programIdColumn0);
            var incrementallyUpdateCountColumn = new Column("IncrementallyUpdateCount", "INTEGER", episodeListSyncStatusDataTable);
            episodeListSyncStatusDataTable.Columns.Add("IncrementallyUpdateCount", incrementallyUpdateCountColumn);
            var latestFullSynchronizingTimeColumn = new Column("LatestFullSynchronizingTime", "bigint", episodeListSyncStatusDataTable);
            episodeListSyncStatusDataTable.Columns.Add("LatestFullSynchronizingTime", latestFullSynchronizingTimeColumn);
            var latestUpdateTimeColumn4 = new Column("LatestUpdateTime", "bigint", episodeListSyncStatusDataTable);
            episodeListSyncStatusDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn4);
            var statusColumn = new Column("Status", "INTEGER", episodeListSyncStatusDataTable);
            episodeListSyncStatusDataTable.Columns.Add("Status", statusColumn);
            var pK_EpisodeListSyncStatusData = new UniqueConstraint("PK_EpisodeListSyncStatusData", episodeListSyncStatusDataTable, new[] { programIdColumn0 });
            episodeListSyncStatusDataTable.PrimaryKey = pK_EpisodeListSyncStatusData;
            var pK_EpisodeListSyncStatusDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.EpisodeListSyncStatusData",
                new[] { "ProgramId" });
            pK_EpisodeListSyncStatusData.MappedKeys.Add(pK_EpisodeListSyncStatusDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EpisodeListSyncStatusDataUc).Add(pK_EpisodeListSyncStatusData);
            episodeListSyncStatusDataTable.UniqueConstraints.Add("PK_EpisodeListSyncStatusData", pK_EpisodeListSyncStatusData);
            relationalModel.Tables.Add(("EpisodeListSyncStatusData", null), episodeListSyncStatusDataTable);
            var episodeListSyncStatusDataTableMapping = new TableMapping(episodeListSyncStatusData, episodeListSyncStatusDataTable, true);
            episodeListSyncStatusDataTable.AddTypeMapping(episodeListSyncStatusDataTableMapping, false);
            tableMappings5.Add(episodeListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(programIdColumn0, episodeListSyncStatusData.FindProperty("ProgramId")!, episodeListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(incrementallyUpdateCountColumn, episodeListSyncStatusData.FindProperty("IncrementallyUpdateCount")!, episodeListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(latestFullSynchronizingTimeColumn, episodeListSyncStatusData.FindProperty("LatestFullSynchronizingTime")!, episodeListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn4, episodeListSyncStatusData.FindProperty("LatestUpdateTime")!, episodeListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, episodeListSyncStatusData.FindProperty("Status")!, episodeListSyncStatusDataTableMapping);

            var episodeSongListItemData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListItemData")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            episodeSongListItemData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListItemData", null, relationalModel);
            var albumNameColumnBase0 = new ColumnBase<ColumnMappingBase>("AlbumName", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase.Columns.Add("AlbumName", albumNameColumnBase0);
            var artistColumnBase0 = new ColumnBase<ColumnMappingBase>("Artist", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase.Columns.Add("Artist", artistColumnBase0);
            var composerColumnBase0 = new ColumnBase<ColumnMappingBase>("Composer", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase.Columns.Add("Composer", composerColumnBase0);
            var episodeIdColumnBase0 = new ColumnBase<ColumnMappingBase>("EpisodeId", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase.Columns.Add("EpisodeId", episodeIdColumnBase0);
            var episodeSongListItemDataIdColumnBase = new ColumnBase<ColumnMappingBase>("EpisodeSongListItemDataId", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase.Columns.Add("EpisodeSongListItemDataId", episodeSongListItemDataIdColumnBase);
            var latestUpdateTimeColumnBase5 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase5);
            var publishDateColumnBase1 = new ColumnBase<ColumnMappingBase>("PublishDate", "bigint", peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase.Columns.Add("PublishDate", publishDateColumnBase1);
            var titleColumnBase2 = new ColumnBase<ColumnMappingBase>("Title", "TEXT", peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase.Columns.Add("Title", titleColumnBase2);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListItemData", peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase);
            var peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase = new TableMappingBase<ColumnMappingBase>(episodeSongListItemData, peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase, false);
            defaultTableMappings6.Add(peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)episodeSongListItemDataIdColumnBase, episodeSongListItemData.FindProperty("EpisodeSongListItemDataId")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)albumNameColumnBase0, episodeSongListItemData.FindProperty("AlbumName")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)artistColumnBase0, episodeSongListItemData.FindProperty("Artist")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)composerColumnBase0, episodeSongListItemData.FindProperty("Composer")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)episodeIdColumnBase0, episodeSongListItemData.FindProperty("EpisodeId")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase5, episodeSongListItemData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)publishDateColumnBase1, episodeSongListItemData.FindProperty("PublishDate")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase2, episodeSongListItemData.FindProperty("Title")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListItemDataMappingBase);

            var tableMappings6 = new List<TableMapping>();
            episodeSongListItemData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var episodeSongListItemDataTable = new Table("EpisodeSongListItemData", null, relationalModel);
            var episodeSongListItemDataIdColumn = new Column("EpisodeSongListItemDataId", "INTEGER", episodeSongListItemDataTable);
            episodeSongListItemDataTable.Columns.Add("EpisodeSongListItemDataId", episodeSongListItemDataIdColumn);
            var albumNameColumn0 = new Column("AlbumName", "TEXT", episodeSongListItemDataTable)
            {
                IsNullable = true
            };
            episodeSongListItemDataTable.Columns.Add("AlbumName", albumNameColumn0);
            var artistColumn0 = new Column("Artist", "TEXT", episodeSongListItemDataTable)
            {
                IsNullable = true
            };
            episodeSongListItemDataTable.Columns.Add("Artist", artistColumn0);
            var composerColumn0 = new Column("Composer", "TEXT", episodeSongListItemDataTable)
            {
                IsNullable = true
            };
            episodeSongListItemDataTable.Columns.Add("Composer", composerColumn0);
            var episodeIdColumn0 = new Column("EpisodeId", "INTEGER", episodeSongListItemDataTable);
            episodeSongListItemDataTable.Columns.Add("EpisodeId", episodeIdColumn0);
            var latestUpdateTimeColumn5 = new Column("LatestUpdateTime", "bigint", episodeSongListItemDataTable);
            episodeSongListItemDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn5);
            var publishDateColumn1 = new Column("PublishDate", "bigint", episodeSongListItemDataTable);
            episodeSongListItemDataTable.Columns.Add("PublishDate", publishDateColumn1);
            var titleColumn2 = new Column("Title", "TEXT", episodeSongListItemDataTable);
            episodeSongListItemDataTable.Columns.Add("Title", titleColumn2);
            var pK_EpisodeSongListItemData = new UniqueConstraint("PK_EpisodeSongListItemData", episodeSongListItemDataTable, new[] { episodeSongListItemDataIdColumn });
            episodeSongListItemDataTable.PrimaryKey = pK_EpisodeSongListItemData;
            var pK_EpisodeSongListItemDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListItemData",
                new[] { "EpisodeSongListItemDataId" });
            pK_EpisodeSongListItemData.MappedKeys.Add(pK_EpisodeSongListItemDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EpisodeSongListItemDataUc).Add(pK_EpisodeSongListItemData);
            episodeSongListItemDataTable.UniqueConstraints.Add("PK_EpisodeSongListItemData", pK_EpisodeSongListItemData);
            var iX_EpisodeSongListItemData_EpisodeId_PublishDate = new TableIndex(
            "IX_EpisodeSongListItemData_EpisodeId_PublishDate", episodeSongListItemDataTable, new[] { episodeIdColumn0, publishDateColumn1 }, false);
            var iX_EpisodeSongListItemData_EpisodeId_PublishDateIx = RelationalModel.GetIndex(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListItemData",
                new[] { "EpisodeId", "PublishDate" });
            iX_EpisodeSongListItemData_EpisodeId_PublishDate.MappedIndexes.Add(iX_EpisodeSongListItemData_EpisodeId_PublishDateIx);
            RelationalModel.GetOrCreateTableIndexes(iX_EpisodeSongListItemData_EpisodeId_PublishDateIx).Add(iX_EpisodeSongListItemData_EpisodeId_PublishDate);
            episodeSongListItemDataTable.Indexes.Add("IX_EpisodeSongListItemData_EpisodeId_PublishDate", iX_EpisodeSongListItemData_EpisodeId_PublishDate);
            relationalModel.Tables.Add(("EpisodeSongListItemData", null), episodeSongListItemDataTable);
            var episodeSongListItemDataTableMapping = new TableMapping(episodeSongListItemData, episodeSongListItemDataTable, true);
            episodeSongListItemDataTable.AddTypeMapping(episodeSongListItemDataTableMapping, false);
            tableMappings6.Add(episodeSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(episodeSongListItemDataIdColumn, episodeSongListItemData.FindProperty("EpisodeSongListItemDataId")!, episodeSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(albumNameColumn0, episodeSongListItemData.FindProperty("AlbumName")!, episodeSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(artistColumn0, episodeSongListItemData.FindProperty("Artist")!, episodeSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(composerColumn0, episodeSongListItemData.FindProperty("Composer")!, episodeSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(episodeIdColumn0, episodeSongListItemData.FindProperty("EpisodeId")!, episodeSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn5, episodeSongListItemData.FindProperty("LatestUpdateTime")!, episodeSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(publishDateColumn1, episodeSongListItemData.FindProperty("PublishDate")!, episodeSongListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn2, episodeSongListItemData.FindProperty("Title")!, episodeSongListItemDataTableMapping);

            var episodeSongListSyncStatusData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListSyncStatusData")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            episodeSongListSyncStatusData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListSyncStatusData", null, relationalModel);
            var episodeIdColumnBase1 = new ColumnBase<ColumnMappingBase>("EpisodeId", "INTEGER", peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataTableBase.Columns.Add("EpisodeId", episodeIdColumnBase1);
            var latestUpdateTimeColumnBase6 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase6);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListSyncStatusData", peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataTableBase);
            var peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataMappingBase = new TableMappingBase<ColumnMappingBase>(episodeSongListSyncStatusData, peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataMappingBase, false);
            defaultTableMappings7.Add(peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)episodeIdColumnBase1, episodeSongListSyncStatusData.FindProperty("EpisodeId")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase6, episodeSongListSyncStatusData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsEpisodeSongListSyncStatusDataMappingBase);

            var tableMappings7 = new List<TableMapping>();
            episodeSongListSyncStatusData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var episodeSongListSyncStatusDataTable = new Table("EpisodeSongListSyncStatusData", null, relationalModel);
            var episodeIdColumn1 = new Column("EpisodeId", "INTEGER", episodeSongListSyncStatusDataTable);
            episodeSongListSyncStatusDataTable.Columns.Add("EpisodeId", episodeIdColumn1);
            var latestUpdateTimeColumn6 = new Column("LatestUpdateTime", "bigint", episodeSongListSyncStatusDataTable);
            episodeSongListSyncStatusDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn6);
            var pK_EpisodeSongListSyncStatusData = new UniqueConstraint("PK_EpisodeSongListSyncStatusData", episodeSongListSyncStatusDataTable, new[] { episodeIdColumn1 });
            episodeSongListSyncStatusDataTable.PrimaryKey = pK_EpisodeSongListSyncStatusData;
            var pK_EpisodeSongListSyncStatusDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.EpisodeSongListSyncStatusData",
                new[] { "EpisodeId" });
            pK_EpisodeSongListSyncStatusData.MappedKeys.Add(pK_EpisodeSongListSyncStatusDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_EpisodeSongListSyncStatusDataUc).Add(pK_EpisodeSongListSyncStatusData);
            episodeSongListSyncStatusDataTable.UniqueConstraints.Add("PK_EpisodeSongListSyncStatusData", pK_EpisodeSongListSyncStatusData);
            relationalModel.Tables.Add(("EpisodeSongListSyncStatusData", null), episodeSongListSyncStatusDataTable);
            var episodeSongListSyncStatusDataTableMapping = new TableMapping(episodeSongListSyncStatusData, episodeSongListSyncStatusDataTable, true);
            episodeSongListSyncStatusDataTable.AddTypeMapping(episodeSongListSyncStatusDataTableMapping, false);
            tableMappings7.Add(episodeSongListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(episodeIdColumn1, episodeSongListSyncStatusData.FindProperty("EpisodeId")!, episodeSongListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn6, episodeSongListSyncStatusData.FindProperty("LatestUpdateTime")!, episodeSongListSyncStatusDataTableMapping);

            var listSyncStatusData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.ListSyncStatusData")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            listSyncStatusData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var peksproRadioStormCacheDatabaseModelsListSyncStatusDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.ListSyncStatusData", null, relationalModel);
            var latestUpdateTimeColumnBase7 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsListSyncStatusDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase7);
            var typeIdColumnBase = new ColumnBase<ColumnMappingBase>("TypeId", "INTEGER", peksproRadioStormCacheDatabaseModelsListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsListSyncStatusDataTableBase.Columns.Add("TypeId", typeIdColumnBase);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.ListSyncStatusData", peksproRadioStormCacheDatabaseModelsListSyncStatusDataTableBase);
            var peksproRadioStormCacheDatabaseModelsListSyncStatusDataMappingBase = new TableMappingBase<ColumnMappingBase>(listSyncStatusData, peksproRadioStormCacheDatabaseModelsListSyncStatusDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsListSyncStatusDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsListSyncStatusDataMappingBase, false);
            defaultTableMappings8.Add(peksproRadioStormCacheDatabaseModelsListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeIdColumnBase, listSyncStatusData.FindProperty("TypeId")!, peksproRadioStormCacheDatabaseModelsListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase7, listSyncStatusData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsListSyncStatusDataMappingBase);

            var tableMappings8 = new List<TableMapping>();
            listSyncStatusData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var listSyncStatusDataTable = new Table("ListSyncStatusData", null, relationalModel);
            var typeIdColumn = new Column("TypeId", "INTEGER", listSyncStatusDataTable);
            listSyncStatusDataTable.Columns.Add("TypeId", typeIdColumn);
            var latestUpdateTimeColumn7 = new Column("LatestUpdateTime", "bigint", listSyncStatusDataTable);
            listSyncStatusDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn7);
            var pK_ListSyncStatusData = new UniqueConstraint("PK_ListSyncStatusData", listSyncStatusDataTable, new[] { typeIdColumn });
            listSyncStatusDataTable.PrimaryKey = pK_ListSyncStatusData;
            var pK_ListSyncStatusDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ListSyncStatusData",
                new[] { "TypeId" });
            pK_ListSyncStatusData.MappedKeys.Add(pK_ListSyncStatusDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ListSyncStatusDataUc).Add(pK_ListSyncStatusData);
            listSyncStatusDataTable.UniqueConstraints.Add("PK_ListSyncStatusData", pK_ListSyncStatusData);
            relationalModel.Tables.Add(("ListSyncStatusData", null), listSyncStatusDataTable);
            var listSyncStatusDataTableMapping = new TableMapping(listSyncStatusData, listSyncStatusDataTable, true);
            listSyncStatusDataTable.AddTypeMapping(listSyncStatusDataTableMapping, false);
            tableMappings8.Add(listSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(typeIdColumn, listSyncStatusData.FindProperty("TypeId")!, listSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn7, listSyncStatusData.FindProperty("LatestUpdateTime")!, listSyncStatusDataTableMapping);

            var programData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.ProgramData")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            programData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var peksproRadioStormCacheDatabaseModelsProgramDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.ProgramData", null, relationalModel);
            var archivedColumnBase = new ColumnBase<ColumnMappingBase>("Archived", "INTEGER", peksproRadioStormCacheDatabaseModelsProgramDataTableBase);
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("Archived", archivedColumnBase);
            var broadcastInfoColumnBase = new ColumnBase<ColumnMappingBase>("BroadcastInfo", "TEXT", peksproRadioStormCacheDatabaseModelsProgramDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("BroadcastInfo", broadcastInfoColumnBase);
            var categoryIdColumnBase = new ColumnBase<ColumnMappingBase>("CategoryId", "INTEGER", peksproRadioStormCacheDatabaseModelsProgramDataTableBase);
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("CategoryId", categoryIdColumnBase);
            var categoryNameColumnBase = new ColumnBase<ColumnMappingBase>("CategoryName", "TEXT", peksproRadioStormCacheDatabaseModelsProgramDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("CategoryName", categoryNameColumnBase);
            var channelIdColumnBase3 = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", peksproRadioStormCacheDatabaseModelsProgramDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("ChannelId", channelIdColumnBase3);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("Description", "TEXT", peksproRadioStormCacheDatabaseModelsProgramDataTableBase);
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("Description", descriptionColumnBase0);
            var facebookPageUriColumnBase = new ColumnBase<ColumnMappingBase>("FacebookPageUri", "TEXT", peksproRadioStormCacheDatabaseModelsProgramDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("FacebookPageUri", facebookPageUriColumnBase);
            var hasOnDemandColumnBase = new ColumnBase<ColumnMappingBase>("HasOnDemand", "INTEGER", peksproRadioStormCacheDatabaseModelsProgramDataTableBase);
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("HasOnDemand", hasOnDemandColumnBase);
            var hasPodColumnBase = new ColumnBase<ColumnMappingBase>("HasPod", "INTEGER", peksproRadioStormCacheDatabaseModelsProgramDataTableBase);
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("HasPod", hasPodColumnBase);
            var latestUpdateTimeColumnBase8 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsProgramDataTableBase);
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase8);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", peksproRadioStormCacheDatabaseModelsProgramDataTableBase);
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("Name", nameColumnBase);
            var programIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ProgramId", "INTEGER", peksproRadioStormCacheDatabaseModelsProgramDataTableBase);
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("ProgramId", programIdColumnBase1);
            var programImageHighResolutionColumnBase = new ColumnBase<ColumnMappingBase>("ProgramImageHighResolution", "TEXT", peksproRadioStormCacheDatabaseModelsProgramDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("ProgramImageHighResolution", programImageHighResolutionColumnBase);
            var programImageLowResolutionColumnBase = new ColumnBase<ColumnMappingBase>("ProgramImageLowResolution", "TEXT", peksproRadioStormCacheDatabaseModelsProgramDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("ProgramImageLowResolution", programImageLowResolutionColumnBase);
            var programUriColumnBase = new ColumnBase<ColumnMappingBase>("ProgramUri", "TEXT", peksproRadioStormCacheDatabaseModelsProgramDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("ProgramUri", programUriColumnBase);
            var twitterPageUriColumnBase = new ColumnBase<ColumnMappingBase>("TwitterPageUri", "TEXT", peksproRadioStormCacheDatabaseModelsProgramDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.Columns.Add("TwitterPageUri", twitterPageUriColumnBase);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.ProgramData", peksproRadioStormCacheDatabaseModelsProgramDataTableBase);
            var peksproRadioStormCacheDatabaseModelsProgramDataMappingBase = new TableMappingBase<ColumnMappingBase>(programData, peksproRadioStormCacheDatabaseModelsProgramDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsProgramDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsProgramDataMappingBase, false);
            defaultTableMappings9.Add(peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programIdColumnBase1, programData.FindProperty("ProgramId")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)archivedColumnBase, programData.FindProperty("Archived")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)broadcastInfoColumnBase, programData.FindProperty("BroadcastInfo")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryIdColumnBase, programData.FindProperty("CategoryId")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)categoryNameColumnBase, programData.FindProperty("CategoryName")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase3, programData.FindProperty("ChannelId")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, programData.FindProperty("Description")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)facebookPageUriColumnBase, programData.FindProperty("FacebookPageUri")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hasOnDemandColumnBase, programData.FindProperty("HasOnDemand")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)hasPodColumnBase, programData.FindProperty("HasPod")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase8, programData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, programData.FindProperty("Name")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programImageHighResolutionColumnBase, programData.FindProperty("ProgramImageHighResolution")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programImageLowResolutionColumnBase, programData.FindProperty("ProgramImageLowResolution")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programUriColumnBase, programData.FindProperty("ProgramUri")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)twitterPageUriColumnBase, programData.FindProperty("TwitterPageUri")!, peksproRadioStormCacheDatabaseModelsProgramDataMappingBase);

            var tableMappings9 = new List<TableMapping>();
            programData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var programDataTable = new Table("ProgramData", null, relationalModel);
            var programIdColumn1 = new Column("ProgramId", "INTEGER", programDataTable);
            programDataTable.Columns.Add("ProgramId", programIdColumn1);
            var archivedColumn = new Column("Archived", "INTEGER", programDataTable);
            programDataTable.Columns.Add("Archived", archivedColumn);
            var broadcastInfoColumn = new Column("BroadcastInfo", "TEXT", programDataTable)
            {
                IsNullable = true
            };
            programDataTable.Columns.Add("BroadcastInfo", broadcastInfoColumn);
            var categoryIdColumn = new Column("CategoryId", "INTEGER", programDataTable);
            programDataTable.Columns.Add("CategoryId", categoryIdColumn);
            var categoryNameColumn = new Column("CategoryName", "TEXT", programDataTable)
            {
                IsNullable = true
            };
            programDataTable.Columns.Add("CategoryName", categoryNameColumn);
            var channelIdColumn3 = new Column("ChannelId", "INTEGER", programDataTable)
            {
                IsNullable = true
            };
            programDataTable.Columns.Add("ChannelId", channelIdColumn3);
            var descriptionColumn0 = new Column("Description", "TEXT", programDataTable);
            programDataTable.Columns.Add("Description", descriptionColumn0);
            var facebookPageUriColumn = new Column("FacebookPageUri", "TEXT", programDataTable)
            {
                IsNullable = true
            };
            programDataTable.Columns.Add("FacebookPageUri", facebookPageUriColumn);
            var hasOnDemandColumn = new Column("HasOnDemand", "INTEGER", programDataTable);
            programDataTable.Columns.Add("HasOnDemand", hasOnDemandColumn);
            var hasPodColumn = new Column("HasPod", "INTEGER", programDataTable);
            programDataTable.Columns.Add("HasPod", hasPodColumn);
            var latestUpdateTimeColumn8 = new Column("LatestUpdateTime", "bigint", programDataTable);
            programDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn8);
            var nameColumn = new Column("Name", "TEXT", programDataTable);
            programDataTable.Columns.Add("Name", nameColumn);
            var programImageHighResolutionColumn = new Column("ProgramImageHighResolution", "TEXT", programDataTable)
            {
                IsNullable = true
            };
            programDataTable.Columns.Add("ProgramImageHighResolution", programImageHighResolutionColumn);
            var programImageLowResolutionColumn = new Column("ProgramImageLowResolution", "TEXT", programDataTable)
            {
                IsNullable = true
            };
            programDataTable.Columns.Add("ProgramImageLowResolution", programImageLowResolutionColumn);
            var programUriColumn = new Column("ProgramUri", "TEXT", programDataTable)
            {
                IsNullable = true
            };
            programDataTable.Columns.Add("ProgramUri", programUriColumn);
            var twitterPageUriColumn = new Column("TwitterPageUri", "TEXT", programDataTable)
            {
                IsNullable = true
            };
            programDataTable.Columns.Add("TwitterPageUri", twitterPageUriColumn);
            var pK_ProgramData = new UniqueConstraint("PK_ProgramData", programDataTable, new[] { programIdColumn1 });
            programDataTable.PrimaryKey = pK_ProgramData;
            var pK_ProgramDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ProgramData",
                new[] { "ProgramId" });
            pK_ProgramData.MappedKeys.Add(pK_ProgramDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProgramDataUc).Add(pK_ProgramData);
            programDataTable.UniqueConstraints.Add("PK_ProgramData", pK_ProgramData);
            relationalModel.Tables.Add(("ProgramData", null), programDataTable);
            var programDataTableMapping = new TableMapping(programData, programDataTable, true);
            programDataTable.AddTypeMapping(programDataTableMapping, false);
            tableMappings9.Add(programDataTableMapping);
            RelationalModel.CreateColumnMapping(programIdColumn1, programData.FindProperty("ProgramId")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(archivedColumn, programData.FindProperty("Archived")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(broadcastInfoColumn, programData.FindProperty("BroadcastInfo")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(categoryIdColumn, programData.FindProperty("CategoryId")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(categoryNameColumn, programData.FindProperty("CategoryName")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn3, programData.FindProperty("ChannelId")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, programData.FindProperty("Description")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(facebookPageUriColumn, programData.FindProperty("FacebookPageUri")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(hasOnDemandColumn, programData.FindProperty("HasOnDemand")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(hasPodColumn, programData.FindProperty("HasPod")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn8, programData.FindProperty("LatestUpdateTime")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, programData.FindProperty("Name")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(programImageHighResolutionColumn, programData.FindProperty("ProgramImageHighResolution")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(programImageLowResolutionColumn, programData.FindProperty("ProgramImageLowResolution")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(programUriColumn, programData.FindProperty("ProgramUri")!, programDataTableMapping);
            RelationalModel.CreateColumnMapping(twitterPageUriColumn, programData.FindProperty("TwitterPageUri")!, programDataTableMapping);

            var scheduledEpisodeListItemData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListItemData")!;

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            scheduledEpisodeListItemData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListItemData", null, relationalModel);
            var channelIdColumnBase4 = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("ChannelId", channelIdColumnBase4);
            var dateColumnBase = new ColumnBase<ColumnMappingBase>("Date", "bigint", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("Date", dateColumnBase);
            var descriptionColumnBase1 = new ColumnBase<ColumnMappingBase>("Description", "TEXT", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("Description", descriptionColumnBase1);
            var endTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("EndTimeUtc", "bigint", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("EndTimeUtc", endTimeUtcColumnBase);
            var episodeIdColumnBase2 = new ColumnBase<ColumnMappingBase>("EpisodeId", "INTEGER", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("EpisodeId", episodeIdColumnBase2);
            var programIdColumnBase2 = new ColumnBase<ColumnMappingBase>("ProgramId", "INTEGER", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("ProgramId", programIdColumnBase2);
            var programNameColumnBase0 = new ColumnBase<ColumnMappingBase>("ProgramName", "TEXT", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase)
            {
                IsNullable = true
            };
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("ProgramName", programNameColumnBase0);
            var scheduledEpisodeDataIdColumnBase = new ColumnBase<ColumnMappingBase>("ScheduledEpisodeDataId", "INTEGER", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("ScheduledEpisodeDataId", scheduledEpisodeDataIdColumnBase);
            var startTimeUtcColumnBase = new ColumnBase<ColumnMappingBase>("StartTimeUtc", "bigint", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("StartTimeUtc", startTimeUtcColumnBase);
            var titleColumnBase3 = new ColumnBase<ColumnMappingBase>("Title", "TEXT", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.Columns.Add("Title", titleColumnBase3);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListItemData", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase);
            var peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase = new TableMappingBase<ColumnMappingBase>(scheduledEpisodeListItemData, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase, false);
            defaultTableMappings10.Add(peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)scheduledEpisodeDataIdColumnBase, scheduledEpisodeListItemData.FindProperty("ScheduledEpisodeDataId")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase4, scheduledEpisodeListItemData.FindProperty("ChannelId")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateColumnBase, scheduledEpisodeListItemData.FindProperty("Date")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase1, scheduledEpisodeListItemData.FindProperty("Description")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endTimeUtcColumnBase, scheduledEpisodeListItemData.FindProperty("EndTimeUtc")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)episodeIdColumnBase2, scheduledEpisodeListItemData.FindProperty("EpisodeId")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programIdColumnBase2, scheduledEpisodeListItemData.FindProperty("ProgramId")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)programNameColumnBase0, scheduledEpisodeListItemData.FindProperty("ProgramName")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)startTimeUtcColumnBase, scheduledEpisodeListItemData.FindProperty("StartTimeUtc")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)titleColumnBase3, scheduledEpisodeListItemData.FindProperty("Title")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListItemDataMappingBase);

            var tableMappings10 = new List<TableMapping>();
            scheduledEpisodeListItemData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var scheduledEpisodeListItemDataTable = new Table("ScheduledEpisodeListItemData", null, relationalModel);
            var scheduledEpisodeDataIdColumn = new Column("ScheduledEpisodeDataId", "INTEGER", scheduledEpisodeListItemDataTable);
            scheduledEpisodeListItemDataTable.Columns.Add("ScheduledEpisodeDataId", scheduledEpisodeDataIdColumn);
            var channelIdColumn4 = new Column("ChannelId", "INTEGER", scheduledEpisodeListItemDataTable);
            scheduledEpisodeListItemDataTable.Columns.Add("ChannelId", channelIdColumn4);
            var dateColumn = new Column("Date", "bigint", scheduledEpisodeListItemDataTable);
            scheduledEpisodeListItemDataTable.Columns.Add("Date", dateColumn);
            var descriptionColumn1 = new Column("Description", "TEXT", scheduledEpisodeListItemDataTable);
            scheduledEpisodeListItemDataTable.Columns.Add("Description", descriptionColumn1);
            var endTimeUtcColumn = new Column("EndTimeUtc", "bigint", scheduledEpisodeListItemDataTable);
            scheduledEpisodeListItemDataTable.Columns.Add("EndTimeUtc", endTimeUtcColumn);
            var episodeIdColumn2 = new Column("EpisodeId", "INTEGER", scheduledEpisodeListItemDataTable);
            scheduledEpisodeListItemDataTable.Columns.Add("EpisodeId", episodeIdColumn2);
            var programIdColumn2 = new Column("ProgramId", "INTEGER", scheduledEpisodeListItemDataTable);
            scheduledEpisodeListItemDataTable.Columns.Add("ProgramId", programIdColumn2);
            var programNameColumn0 = new Column("ProgramName", "TEXT", scheduledEpisodeListItemDataTable)
            {
                IsNullable = true
            };
            scheduledEpisodeListItemDataTable.Columns.Add("ProgramName", programNameColumn0);
            var startTimeUtcColumn = new Column("StartTimeUtc", "bigint", scheduledEpisodeListItemDataTable);
            scheduledEpisodeListItemDataTable.Columns.Add("StartTimeUtc", startTimeUtcColumn);
            var titleColumn3 = new Column("Title", "TEXT", scheduledEpisodeListItemDataTable);
            scheduledEpisodeListItemDataTable.Columns.Add("Title", titleColumn3);
            var pK_ScheduledEpisodeListItemData = new UniqueConstraint("PK_ScheduledEpisodeListItemData", scheduledEpisodeListItemDataTable, new[] { scheduledEpisodeDataIdColumn });
            scheduledEpisodeListItemDataTable.PrimaryKey = pK_ScheduledEpisodeListItemData;
            var pK_ScheduledEpisodeListItemDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListItemData",
                new[] { "ScheduledEpisodeDataId" });
            pK_ScheduledEpisodeListItemData.MappedKeys.Add(pK_ScheduledEpisodeListItemDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ScheduledEpisodeListItemDataUc).Add(pK_ScheduledEpisodeListItemData);
            scheduledEpisodeListItemDataTable.UniqueConstraints.Add("PK_ScheduledEpisodeListItemData", pK_ScheduledEpisodeListItemData);
            var iX_ScheduledEpisodeListItemData_ChannelId_Date = new TableIndex(
            "IX_ScheduledEpisodeListItemData_ChannelId_Date", scheduledEpisodeListItemDataTable, new[] { channelIdColumn4, dateColumn }, false);
            var iX_ScheduledEpisodeListItemData_ChannelId_DateIx = RelationalModel.GetIndex(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListItemData",
                new[] { "ChannelId", "Date" });
            iX_ScheduledEpisodeListItemData_ChannelId_Date.MappedIndexes.Add(iX_ScheduledEpisodeListItemData_ChannelId_DateIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ScheduledEpisodeListItemData_ChannelId_DateIx).Add(iX_ScheduledEpisodeListItemData_ChannelId_Date);
            scheduledEpisodeListItemDataTable.Indexes.Add("IX_ScheduledEpisodeListItemData_ChannelId_Date", iX_ScheduledEpisodeListItemData_ChannelId_Date);
            relationalModel.Tables.Add(("ScheduledEpisodeListItemData", null), scheduledEpisodeListItemDataTable);
            var scheduledEpisodeListItemDataTableMapping = new TableMapping(scheduledEpisodeListItemData, scheduledEpisodeListItemDataTable, true);
            scheduledEpisodeListItemDataTable.AddTypeMapping(scheduledEpisodeListItemDataTableMapping, false);
            tableMappings10.Add(scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(scheduledEpisodeDataIdColumn, scheduledEpisodeListItemData.FindProperty("ScheduledEpisodeDataId")!, scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn4, scheduledEpisodeListItemData.FindProperty("ChannelId")!, scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(dateColumn, scheduledEpisodeListItemData.FindProperty("Date")!, scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn1, scheduledEpisodeListItemData.FindProperty("Description")!, scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(endTimeUtcColumn, scheduledEpisodeListItemData.FindProperty("EndTimeUtc")!, scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(episodeIdColumn2, scheduledEpisodeListItemData.FindProperty("EpisodeId")!, scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(programIdColumn2, scheduledEpisodeListItemData.FindProperty("ProgramId")!, scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(programNameColumn0, scheduledEpisodeListItemData.FindProperty("ProgramName")!, scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(startTimeUtcColumn, scheduledEpisodeListItemData.FindProperty("StartTimeUtc")!, scheduledEpisodeListItemDataTableMapping);
            RelationalModel.CreateColumnMapping(titleColumn3, scheduledEpisodeListItemData.FindProperty("Title")!, scheduledEpisodeListItemDataTableMapping);

            var scheduledEpisodeListSyncStatusData = FindEntityType("Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListSyncStatusData")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            scheduledEpisodeListSyncStatusData.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase = new TableBase("Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListSyncStatusData", null, relationalModel);
            var channelIdColumnBase5 = new ColumnBase<ColumnMappingBase>("ChannelId", "INTEGER", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase.Columns.Add("ChannelId", channelIdColumnBase5);
            var dateColumnBase0 = new ColumnBase<ColumnMappingBase>("Date", "bigint", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase.Columns.Add("Date", dateColumnBase0);
            var latestUpdateTimeColumnBase9 = new ColumnBase<ColumnMappingBase>("LatestUpdateTime", "bigint", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase.Columns.Add("LatestUpdateTime", latestUpdateTimeColumnBase9);
            relationalModel.DefaultTables.Add("Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListSyncStatusData", peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase);
            var peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataMappingBase = new TableMappingBase<ColumnMappingBase>(scheduledEpisodeListSyncStatusData, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase, true);
            peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataTableBase.AddTypeMapping(peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataMappingBase, false);
            defaultTableMappings11.Add(peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)channelIdColumnBase5, scheduledEpisodeListSyncStatusData.FindProperty("ChannelId")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)dateColumnBase0, scheduledEpisodeListSyncStatusData.FindProperty("Date")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)latestUpdateTimeColumnBase9, scheduledEpisodeListSyncStatusData.FindProperty("LatestUpdateTime")!, peksproRadioStormCacheDatabaseModelsScheduledEpisodeListSyncStatusDataMappingBase);

            var tableMappings11 = new List<TableMapping>();
            scheduledEpisodeListSyncStatusData.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var scheduledEpisodeListSyncStatusDataTable = new Table("ScheduledEpisodeListSyncStatusData", null, relationalModel);
            var channelIdColumn5 = new Column("ChannelId", "INTEGER", scheduledEpisodeListSyncStatusDataTable);
            scheduledEpisodeListSyncStatusDataTable.Columns.Add("ChannelId", channelIdColumn5);
            var dateColumn0 = new Column("Date", "bigint", scheduledEpisodeListSyncStatusDataTable);
            scheduledEpisodeListSyncStatusDataTable.Columns.Add("Date", dateColumn0);
            var latestUpdateTimeColumn9 = new Column("LatestUpdateTime", "bigint", scheduledEpisodeListSyncStatusDataTable);
            scheduledEpisodeListSyncStatusDataTable.Columns.Add("LatestUpdateTime", latestUpdateTimeColumn9);
            var pK_ScheduledEpisodeListSyncStatusData = new UniqueConstraint("PK_ScheduledEpisodeListSyncStatusData", scheduledEpisodeListSyncStatusDataTable, new[] { channelIdColumn5 });
            scheduledEpisodeListSyncStatusDataTable.PrimaryKey = pK_ScheduledEpisodeListSyncStatusData;
            var pK_ScheduledEpisodeListSyncStatusDataUc = RelationalModel.GetKey(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListSyncStatusData",
                new[] { "ChannelId" });
            pK_ScheduledEpisodeListSyncStatusData.MappedKeys.Add(pK_ScheduledEpisodeListSyncStatusDataUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ScheduledEpisodeListSyncStatusDataUc).Add(pK_ScheduledEpisodeListSyncStatusData);
            scheduledEpisodeListSyncStatusDataTable.UniqueConstraints.Add("PK_ScheduledEpisodeListSyncStatusData", pK_ScheduledEpisodeListSyncStatusData);
            var iX_ScheduledEpisodeListSyncStatusData_ChannelId = new TableIndex(
            "IX_ScheduledEpisodeListSyncStatusData_ChannelId", scheduledEpisodeListSyncStatusDataTable, new[] { channelIdColumn5 }, false);
            var iX_ScheduledEpisodeListSyncStatusData_ChannelIdIx = RelationalModel.GetIndex(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListSyncStatusData",
                new[] { "ChannelId" });
            iX_ScheduledEpisodeListSyncStatusData_ChannelId.MappedIndexes.Add(iX_ScheduledEpisodeListSyncStatusData_ChannelIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ScheduledEpisodeListSyncStatusData_ChannelIdIx).Add(iX_ScheduledEpisodeListSyncStatusData_ChannelId);
            scheduledEpisodeListSyncStatusDataTable.Indexes.Add("IX_ScheduledEpisodeListSyncStatusData_ChannelId", iX_ScheduledEpisodeListSyncStatusData_ChannelId);
            var iX_ScheduledEpisodeListSyncStatusData_Date = new TableIndex(
            "IX_ScheduledEpisodeListSyncStatusData_Date", scheduledEpisodeListSyncStatusDataTable, new[] { dateColumn0 }, false);
            var iX_ScheduledEpisodeListSyncStatusData_DateIx = RelationalModel.GetIndex(this,
                "Pekspro.RadioStorm.CacheDatabase.Models.ScheduledEpisodeListSyncStatusData",
                new[] { "Date" });
            iX_ScheduledEpisodeListSyncStatusData_Date.MappedIndexes.Add(iX_ScheduledEpisodeListSyncStatusData_DateIx);
            RelationalModel.GetOrCreateTableIndexes(iX_ScheduledEpisodeListSyncStatusData_DateIx).Add(iX_ScheduledEpisodeListSyncStatusData_Date);
            scheduledEpisodeListSyncStatusDataTable.Indexes.Add("IX_ScheduledEpisodeListSyncStatusData_Date", iX_ScheduledEpisodeListSyncStatusData_Date);
            relationalModel.Tables.Add(("ScheduledEpisodeListSyncStatusData", null), scheduledEpisodeListSyncStatusDataTable);
            var scheduledEpisodeListSyncStatusDataTableMapping = new TableMapping(scheduledEpisodeListSyncStatusData, scheduledEpisodeListSyncStatusDataTable, true);
            scheduledEpisodeListSyncStatusDataTable.AddTypeMapping(scheduledEpisodeListSyncStatusDataTableMapping, false);
            tableMappings11.Add(scheduledEpisodeListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(channelIdColumn5, scheduledEpisodeListSyncStatusData.FindProperty("ChannelId")!, scheduledEpisodeListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(dateColumn0, scheduledEpisodeListSyncStatusData.FindProperty("Date")!, scheduledEpisodeListSyncStatusDataTableMapping);
            RelationalModel.CreateColumnMapping(latestUpdateTimeColumn9, scheduledEpisodeListSyncStatusData.FindProperty("LatestUpdateTime")!, scheduledEpisodeListSyncStatusDataTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
