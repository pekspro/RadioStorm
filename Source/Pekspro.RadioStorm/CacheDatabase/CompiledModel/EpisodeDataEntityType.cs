// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.Metadata;
using Pekspro.RadioStorm.CacheDatabase.Models;

#pragma warning disable 219, 612, 618
#nullable enable

namespace Pekspro.RadioStorm.CacheDatabase.CompiledModel
{
    internal sealed partial class EpisodeDataEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType? baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Pekspro.RadioStorm.CacheDatabase.Models.EpisodeData",
                typeof(EpisodeData),
                baseEntityType);

            var episodeId = runtimeEntityType.AddProperty(
                "EpisodeId",
                typeof(int),
                propertyInfo: typeof(EpisodeData).GetProperty("EpisodeId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<EpisodeId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);

            var audioDownloadDuration = runtimeEntityType.AddProperty(
                "AudioDownloadDuration",
                typeof(int),
                propertyInfo: typeof(EpisodeData).GetProperty("AudioDownloadDuration", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<AudioDownloadDuration>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var audioDownloadUrl = runtimeEntityType.AddProperty(
                "AudioDownloadUrl",
                typeof(string),
                propertyInfo: typeof(EpisodeData).GetProperty("AudioDownloadUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<AudioDownloadUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var audioStreamWithMusicDuration = runtimeEntityType.AddProperty(
                "AudioStreamWithMusicDuration",
                typeof(int),
                propertyInfo: typeof(EpisodeData).GetProperty("AudioStreamWithMusicDuration", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<AudioStreamWithMusicDuration>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var audioStreamWithMusicExpireDate = runtimeEntityType.AddProperty(
                "AudioStreamWithMusicExpireDate",
                typeof(DateTimeOffset?),
                propertyInfo: typeof(EpisodeData).GetProperty("AudioStreamWithMusicExpireDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<AudioStreamWithMusicExpireDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true,
                valueConverter: new DateTimeOffsetToTicksConverter());
            audioStreamWithMusicExpireDate.AddAnnotation("Relational:ColumnType", "bigint");

            var audioStreamWithMusicUrl = runtimeEntityType.AddProperty(
                "AudioStreamWithMusicUrl",
                typeof(string),
                propertyInfo: typeof(EpisodeData).GetProperty("AudioStreamWithMusicUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<AudioStreamWithMusicUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var audioStreamWithoutMusicDuration = runtimeEntityType.AddProperty(
                "AudioStreamWithoutMusicDuration",
                typeof(int),
                propertyInfo: typeof(EpisodeData).GetProperty("AudioStreamWithoutMusicDuration", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<AudioStreamWithoutMusicDuration>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var audioStreamWithoutMusicUrl = runtimeEntityType.AddProperty(
                "AudioStreamWithoutMusicUrl",
                typeof(string),
                propertyInfo: typeof(EpisodeData).GetProperty("AudioStreamWithoutMusicUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<AudioStreamWithoutMusicUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(EpisodeData).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var episodeImage = runtimeEntityType.AddProperty(
                "EpisodeImage",
                typeof(string),
                propertyInfo: typeof(EpisodeData).GetProperty("EpisodeImage", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<EpisodeImage>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var latestUpdateTime = runtimeEntityType.AddProperty(
                "LatestUpdateTime",
                typeof(DateTimeOffset),
                propertyInfo: typeof(EpisodeData).GetProperty("LatestUpdateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<LatestUpdateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToTicksConverter());
            latestUpdateTime.AddAnnotation("Relational:ColumnType", "bigint");

            var programId = runtimeEntityType.AddProperty(
                "ProgramId",
                typeof(int?),
                propertyInfo: typeof(EpisodeData).GetProperty("ProgramId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<ProgramId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var programName = runtimeEntityType.AddProperty(
                "ProgramName",
                typeof(string),
                propertyInfo: typeof(EpisodeData).GetProperty("ProgramName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<ProgramName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);

            var publishDate = runtimeEntityType.AddProperty(
                "PublishDate",
                typeof(DateTimeOffset),
                propertyInfo: typeof(EpisodeData).GetProperty("PublishDate", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<PublishDate>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToTicksConverter());
            publishDate.AddAnnotation("Relational:ColumnType", "bigint");

            var title = runtimeEntityType.AddProperty(
                "Title",
                typeof(string),
                propertyInfo: typeof(EpisodeData).GetProperty("Title", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeData).GetField("<Title>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));

            var key = runtimeEntityType.AddKey(
                new[] { episodeId });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { programId, publishDate });

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EpisodeData");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
