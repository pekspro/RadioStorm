// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pekspro.RadioStorm.CacheDatabase.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Pekspro.RadioStorm.CacheDatabase.CompiledModel
{
    internal partial class EpisodeListSyncStatusDataEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Pekspro.RadioStorm.CacheDatabase.Models.EpisodeListSyncStatusData",
                typeof(EpisodeListSyncStatusData),
                baseEntityType);

            var programId = runtimeEntityType.AddProperty(
                "ProgramId",
                typeof(int),
                propertyInfo: typeof(EpisodeListSyncStatusData).GetProperty("ProgramId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeListSyncStatusData).GetField("<ProgramId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            programId.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var incrementallyUpdateCount = runtimeEntityType.AddProperty(
                "IncrementallyUpdateCount",
                typeof(int),
                propertyInfo: typeof(EpisodeListSyncStatusData).GetProperty("IncrementallyUpdateCount", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeListSyncStatusData).GetField("<IncrementallyUpdateCount>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            incrementallyUpdateCount.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var latestFullSynchronizingTime = runtimeEntityType.AddProperty(
                "LatestFullSynchronizingTime",
                typeof(DateTimeOffset),
                propertyInfo: typeof(EpisodeListSyncStatusData).GetProperty("LatestFullSynchronizingTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeListSyncStatusData).GetField("<LatestFullSynchronizingTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToTicksConverter());
            latestFullSynchronizingTime.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<DateTimeOffset, long>(
                    (DateTimeOffset v) => v.UtcTicks,
                    (long v) => new DateTimeOffset(new DateTime(v, DateTimeKind.Utc)).ToLocalTime()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTimeOffset, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<DateTimeOffset, long>(
                        (DateTimeOffset v) => v.UtcTicks,
                        (long v) => new DateTimeOffset(new DateTime(v, DateTimeKind.Utc)).ToLocalTime())));
            latestFullSynchronizingTime.SetSentinelFromProviderValue(0L);
            latestFullSynchronizingTime.AddAnnotation("Relational:ColumnType", "bigint");

            var latestUpdateTime = runtimeEntityType.AddProperty(
                "LatestUpdateTime",
                typeof(DateTimeOffset),
                propertyInfo: typeof(EpisodeListSyncStatusData).GetProperty("LatestUpdateTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeListSyncStatusData).GetField("<LatestUpdateTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueConverter: new DateTimeOffsetToTicksConverter());
            latestUpdateTime.TypeMapping = LongTypeMapping.Default.Clone(
                comparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                keyComparer: new ValueComparer<DateTimeOffset>(
                    (DateTimeOffset v1, DateTimeOffset v2) => v1.EqualsExact(v2),
                    (DateTimeOffset v) => v.GetHashCode(),
                    (DateTimeOffset v) => v),
                providerValueComparer: new ValueComparer<long>(
                    (long v1, long v2) => v1 == v2,
                    (long v) => v.GetHashCode(),
                    (long v) => v),
                converter: new ValueConverter<DateTimeOffset, long>(
                    (DateTimeOffset v) => v.UtcTicks,
                    (long v) => new DateTimeOffset(new DateTime(v, DateTimeKind.Utc)).ToLocalTime()),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<DateTimeOffset, long>(
                    JsonInt64ReaderWriter.Instance,
                    new ValueConverter<DateTimeOffset, long>(
                        (DateTimeOffset v) => v.UtcTicks,
                        (long v) => new DateTimeOffset(new DateTime(v, DateTimeKind.Utc)).ToLocalTime())));
            latestUpdateTime.SetSentinelFromProviderValue(0L);
            latestUpdateTime.AddAnnotation("Relational:ColumnType", "bigint");

            var status = runtimeEntityType.AddProperty(
                "Status",
                typeof(EpisodeListSyncStatusData.SyncStatus),
                propertyInfo: typeof(EpisodeListSyncStatusData).GetProperty("Status", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(EpisodeListSyncStatusData).GetField("<Status>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            status.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<EpisodeListSyncStatusData.SyncStatus>(
                    (EpisodeListSyncStatusData.SyncStatus v1, EpisodeListSyncStatusData.SyncStatus v2) => object.Equals((object)v1, (object)v2),
                    (EpisodeListSyncStatusData.SyncStatus v) => v.GetHashCode(),
                    (EpisodeListSyncStatusData.SyncStatus v) => v),
                keyComparer: new ValueComparer<EpisodeListSyncStatusData.SyncStatus>(
                    (EpisodeListSyncStatusData.SyncStatus v1, EpisodeListSyncStatusData.SyncStatus v2) => object.Equals((object)v1, (object)v2),
                    (EpisodeListSyncStatusData.SyncStatus v) => v.GetHashCode(),
                    (EpisodeListSyncStatusData.SyncStatus v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"),
                converter: new ValueConverter<EpisodeListSyncStatusData.SyncStatus, int>(
                    (EpisodeListSyncStatusData.SyncStatus value) => (int)value,
                    (int value) => (EpisodeListSyncStatusData.SyncStatus)value),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<EpisodeListSyncStatusData.SyncStatus, int>(
                    JsonInt32ReaderWriter.Instance,
                    new ValueConverter<EpisodeListSyncStatusData.SyncStatus, int>(
                        (EpisodeListSyncStatusData.SyncStatus value) => (int)value,
                        (int value) => (EpisodeListSyncStatusData.SyncStatus)value)));
            status.SetSentinelFromProviderValue(0);

            var key = runtimeEntityType.AddKey(
                new[] { programId });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "EpisodeListSyncStatusData");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
