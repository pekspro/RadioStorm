<ContentPage xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:vm="clr-namespace:Pekspro.RadioStorm.UI.ViewModel.RecentEpisodes;assembly=Pekspro.RadioStorm.UI"
             xmlns:m="clr-namespace:Pekspro.RadioStorm.UI.Model.Episode;assembly=Pekspro.RadioStorm.UI"
             xmlns:v="clr-namespace:Pekspro.RadioStorm.MAUI.Pages.Episode"
             xmlns:r="clr-namespace:Pekspro.RadioStorm.UI.Resources;assembly=Pekspro.RadioStorm.UI"
             xmlns:t="clr-namespace:Pekspro.RadioStorm.MAUI.TemplateSelector"
             xmlns:views="clr-namespace:Pekspro.RadioStorm.MAUI.Views"
             x:Class="Pekspro.RadioStorm.MAUI.Pages.Recent.RecentEpisodesPage"
             x:DataType="vm:RecentEpisodesViewModel"
             Shell.PresentationMode="NotAnimated"
             Title="{x:Static r:Strings.Recent_Title}"
             >
            <!-- TODO: Add:
        
                    x:DataType="vm:RecentEpisodesViewModel"
    
                when this issue is fixed: https://github.com/dotnet/maui/issues/9131 -->
    <ContentPage.Resources>
        <ResourceDictionary>
            <DataTemplate x:Key="EpisodeTemplate" x:DataType="m:RecentEpisodeModel">
                <SwipeView Threshold="{StaticResource DefaultSwipeThreshold}" SwipeStarted="SwipeView_SwipeStarted" SwipeEnded="SwipeView_SwipeEnded" HeightRequest="{StaticResource ListItemHeight}">
                    <SwipeView.LeftItems>
                        <SwipeItems Mode="Execute">
                            <!--<SwipeItem Text="{x:Static r:Strings.General_AddToPlayList}"
                                               Command="{Binding AddToPlayListCommand}"
                                               BackgroundColor="{AppThemeBinding Dark={StaticResource WarningColorDark}, Light={StaticResource WarningColorLight}}"
                                    />-->
                            <SwipeItem Text="{Binding Model.IsListened, Converter={StaticResource BoolToToggleIsListenedConverter}}"
                                               Command="{Binding Model.ToggleIsListenedCommand}"
                                               BackgroundColor="{StaticResource SwipeControlBackgroundGeneral}"
                                    />
                        </SwipeItems>
                    </SwipeView.LeftItems>
                    <SwipeView.RightItems>
                        <SwipeItems Mode="Execute">
                            <SwipeItem  Text="{x:Static r:Strings.General_RemoveDownload}"
                                        IsVisible="{Binding Model.DownloadData, Converter={StaticResource NullToIsVisibleConverter}}"
                                        Command="{Binding Model.DeleteDownloadCommand}"
                                        BackgroundColor="{StaticResource SwipeControlBackgroundRemove}" />

                            <SwipeItem  Text="{x:Static r:Strings.General_Download}"
                                        IsVisible="{Binding Model.HasDownloadSupportAndNoDownload}"
                                        Command="{Binding Model.DownloadCommand}"
                                        BackgroundColor="{StaticResource SwipeControlBackgroundDownload}" />
                        </SwipeItems>
                    </SwipeView.RightItems>
                    <FlyoutBase.ContextFlyout>
                        <MenuFlyout>
                            <MenuFlyoutItem x:Name="MenuItemRemoveFromRecent"
                                            Text="{x:Static r:Strings.Recent_RemoveFromRecent}" 
                                            Clicked="MenuItemRemoveFromRecentTapped" />
                            <MenuFlyoutItem Command="{Binding Model.TogglePlayListCommand}">
                                <MenuFlyoutItem.Text>
                                    <MultiBinding Converter="{StaticResource TogglePlaylistStringConverter}">
                                        <Binding Path="Model.CanBeAddedToPlayList" />
                                        <Binding Path="Model.CanBeRemovedFromPlayList" />
                                    </MultiBinding>
                                </MenuFlyoutItem.Text>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem Command="{Binding Model.ToggleDownloadCommand}">
                                <MenuFlyoutItem.Text>
                                    <MultiBinding Converter="{StaticResource ToggleDownloadStringConverter}">
                                        <Binding Path="Model.CanDownload" />
                                        <Binding Path="Model.CanDeleteDownload" />
                                    </MultiBinding>
                                </MenuFlyoutItem.Text>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem Text="{Binding Model.IsListened, Converter={StaticResource BoolToToggleIsListenedConverter}}" 
                                            Command="{Binding Model.ToggleIsListenedCommand}" />
                        </MenuFlyout>
                    </FlyoutBase.ContextFlyout>
                    <v:EpisodeControl BindingContext="{Binding Model}">
                        <v:EpisodeControl.GestureRecognizers>
                            <TapGestureRecognizer Tapped="EpisodeTapped"/>
                        </v:EpisodeControl.GestureRecognizers>
                    </v:EpisodeControl>
                </SwipeView>
            </DataTemplate>

            <!-- TODO: Remove Grid when this issue is fixed: https://github.com/dotnet/maui/issues/9131 -->
            <DataTemplate x:Key="EpisodeTemplateWindows" x:DataType="m:RecentEpisodeModel">
                <Grid>
                    <FlyoutBase.ContextFlyout>
                        <MenuFlyout>
                            <MenuFlyoutItem x:Name="MenuItemRemoveFromRecent"
                                            Text="{x:Static r:Strings.Recent_RemoveFromRecent}" 
                                            Clicked="MenuItemRemoveFromRecentTapped" />
                            <MenuFlyoutItem Command="{Binding Model.TogglePlayListCommand}">
                                <MenuFlyoutItem.Text>
                                    <MultiBinding Converter="{StaticResource TogglePlaylistStringConverter}">
                                        <Binding Path="Model.CanBeAddedToPlayList" />
                                        <Binding Path="Model.CanBeRemovedFromPlayList" />
                                    </MultiBinding>
                                </MenuFlyoutItem.Text>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem Command="{Binding Model.ToggleDownloadCommand}">
                                <MenuFlyoutItem.Text>
                                    <MultiBinding Converter="{StaticResource ToggleDownloadStringConverter}">
                                        <Binding Path="Model.CanDownload" />
                                        <Binding Path="Model.CanDeleteDownload" />
                                    </MultiBinding>
                                </MenuFlyoutItem.Text>
                            </MenuFlyoutItem>
                            <MenuFlyoutItem Text="{Binding Model.IsListened, Converter={StaticResource BoolToToggleIsListenedConverter}}" 
                                            Command="{Binding Model.ToggleIsListenedCommand}" />
                        </MenuFlyout>
                    </FlyoutBase.ContextFlyout>
                    <v:EpisodeControl BindingContext="{Binding Model}">
                        <v:EpisodeControl.GestureRecognizers>
                            <TapGestureRecognizer Tapped="EpisodeTapped"/>
                        </v:EpisodeControl.GestureRecognizers>
                    </v:EpisodeControl>
                </Grid>
            </DataTemplate>

            <t:PlatformTemplateSelector x:Key="episodeTemplateSelector" 
                                        DefaultTemplate="{StaticResource EpisodeTemplate}" 
                                        WindowsTemplate="{StaticResource EpisodeTemplateWindows}" 
                                        />
        </ResourceDictionary>
    </ContentPage.Resources>
    <ContentPage.ToolbarItems>
        <ToolbarItem 
                Command="{Binding UpdateCommand}"
                Text="{x:Static r:Strings.General_Update}"
                Order="Secondary"
                Priority="0" />
    </ContentPage.ToolbarItems>
    
    <Grid RowSpacing="0" RowDefinitions="Auto,*,Auto">

        <views:DownloadState Grid.Row="0" Grid.RowSpan="2" NoDataText="{x:Static r:Strings.Recent_Empty}" />

        <!-- Breaks on Android: ItemSizingStrategy="MeasureFirstItem"-->
        <RefreshView 
                Command="{Binding RefreshCommand}" 
                IsRefreshing="{Binding IsRefreshing}"
                IsVisible="{Binding HasData}"
                Grid.Row="1"
            >
            <CollectionView 
                ItemsSource="{Binding GroupedItems}"
                IsGrouped="True"
                SelectionMode="{Binding SelectionModeHelper.InSelectionMode, Converter={StaticResource BoolToSelectionMode}}"
                ItemTemplate="{StaticResource episodeTemplateSelector}"
                >
                <CollectionView.GroupHeaderTemplate>
                    <DataTemplate>
                        <views:GroupHeaderControl />
                    </DataTemplate>
                </CollectionView.GroupHeaderTemplate>
            </CollectionView>
        </RefreshView>

        <views:PlayerControl Grid.Row="2" />
    </Grid>
</ContentPage>
